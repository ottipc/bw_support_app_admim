import React from 'react';
import cssModules from 'react-css-modules';
import classNames from 'classnames';
import styles from './Button.scss';

const Button = (props) => {
  const { variant = 'primary', size = 'default', layout = 'inlineBlock', type = 'button', disabled = false } = props;
  const { href, children, onClick, loading } = props;
  // CSS classes are composed using the Classnames utility function.
  const styleName = classNames({
    [`btn-${variant}`]: true,
    [`btn-${size}`]: true,
    [`btn-${layout}`]: true,
    'btn-loading': loading
  });

  // Once we figure out how we'll be doing route handling this could connect to a utitlity that
  // binds the router, otherwise it will just send you the designated url with an href for now
  return href
    ?
      <a
        styleName={styleName}
        href={href}
        disabled={disabled}
        aria-label={props['aria-label']}
        aria-live={props['aria-live']}
        aria-atomic={props['aria-atomic']}
      >
        {children}
        {loading ?
          '...' :
          ''
        }
      </a>
    :
      <button
        styleName={styleName}
        onClick={onClick}
        disabled={disabled}
        type={type}
        aria-label={props['aria-label']}
        aria-live={props['aria-live']}
        aria-atomic={props['aria-atomic']}
      >
        {children}
        {loading ?
          '...' :
          ''
        }
      </button>;
};

Button.propTypes = {
  children: React.PropTypes.node,
  onClick: React.PropTypes.func,
  href: React.PropTypes.string,
  variant: React.PropTypes.string,
  size: React.PropTypes.string,
  disabled: React.PropTypes.bool,
  layout: React.PropTypes.string,
  loading: React.PropTypes.bool,
  'aria-label': React.PropTypes.string,
  'aria-atomic': React.PropTypes.string,
  'aria-live': React.PropTypes.string,
  /**
   * Defines HTML button type attribute
   * @defaultValue 'button'
   */
  type: React.PropTypes.oneOf(['button', 'reset', 'submit'])
};

export default cssModules(Button, styles, { allowMultiple: true });

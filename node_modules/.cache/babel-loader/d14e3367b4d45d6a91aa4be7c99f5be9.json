{"ast":null,"code":"/**\n * Convert a `File` object returned by the upload input into a base 64 string.\n * That's not the most optimized way to store images in production, but it's\n * enough to illustrate the idea of data provider decoration.\n */\nconst convertFileToBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file.rawFile);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = reject;\n});\n/**\n * For posts update only, convert uploaded image in base 64 and attach it to\n * the `picture` sent property, with `src` and `title` attributes.\n */\n\n\nconst addUploadFeature = requestHandler => (type, resource, params) => {\n  if (type === 'UPDATE' && resource === 'posts') {\n    // notice that following condition can be true only when `<ImageInput source=\"pictures\" />` component has parameter `multiple={true}`\n    // if parameter `multiple` is false, then data.pictures is not an array, but single object\n    if (params.data.pictures && params.data.pictures.length) {\n      // only freshly dropped pictures are instance of File\n      const formerPictures = params.data.pictures.filter(p => !(p.rawFile instanceof File));\n      const newPictures = params.data.pictures.filter(p => p.rawFile instanceof File);\n      return Promise.all(newPictures.map(convertFileToBase64)).then(base64Pictures => base64Pictures.map((picture64, index) => ({\n        src: picture64,\n        title: `${newPictures[index].title}`\n      }))).then(transformedNewPictures => requestHandler(type, resource, { ...params,\n        data: { ...params.data,\n          pictures: [...transformedNewPictures, ...formerPictures]\n        }\n      })).catch();\n    }\n  } // for other request types and resources, fall back to the default request handler\n\n\n  return requestHandler(type, resource, params);\n};\n\nexport default addUploadFeature;","map":{"version":3,"sources":["/home/codi/Entwicklung/workspace-webstorm/question_app_admin/src/api/addUploadFeature.js"],"names":["convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","rawFile","onload","result","onerror","addUploadFeature","requestHandler","type","resource","params","data","pictures","length","formerPictures","filter","p","File","newPictures","all","map","then","base64Pictures","picture64","index","src","title","transformedNewPictures","catch"],"mappings":"AAAA;;;;;AAKA,MAAMA,mBAAmB,GAAGC,IAAI,IAAI,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACjE,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBN,IAAI,CAACO,OAA1B;;AAEAH,EAAAA,MAAM,CAACI,MAAP,GAAgB,MAAMN,OAAO,CAACE,MAAM,CAACK,MAAR,CAA7B;;AACAL,EAAAA,MAAM,CAACM,OAAP,GAAiBP,MAAjB;AACH,CANmC,CAApC;AAQA;;;;;;AAIA,MAAMQ,gBAAgB,GAAGC,cAAc,IAAI,CAACC,IAAD,EAAOC,QAAP,EAAiBC,MAAjB,KAA4B;AACnE,MAAIF,IAAI,KAAK,QAAT,IAAqBC,QAAQ,KAAK,OAAtC,EAA+C;AAC3C;AACA;AACA,QAAIC,MAAM,CAACC,IAAP,CAAYC,QAAZ,IAAwBF,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,MAAjD,EAAyD;AACrD;AACA,YAAMC,cAAc,GAAGJ,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBG,MAArB,CAA4BC,CAAC,IAAI,EAAEA,CAAC,CAACd,OAAF,YAAqBe,IAAvB,CAAjC,CAAvB;AACA,YAAMC,WAAW,GAAGR,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBG,MAArB,CAA4BC,CAAC,IAAIA,CAAC,CAACd,OAAF,YAAqBe,IAAtD,CAApB;AAEA,aAAOrB,OAAO,CAACuB,GAAR,CAAYD,WAAW,CAACE,GAAZ,CAAgB1B,mBAAhB,CAAZ,EACF2B,IADE,CACGC,cAAc,IAAIA,cAAc,CAACF,GAAf,CAAmB,CAACG,SAAD,EAAYC,KAAZ,MAAuB;AAC9DC,QAAAA,GAAG,EAAEF,SADyD;AAE9DG,QAAAA,KAAK,EAAG,GAAER,WAAW,CAACM,KAAD,CAAX,CAAmBE,KAAM;AAF2B,OAAvB,CAAnB,CADrB,EAKFL,IALE,CAKGM,sBAAsB,IAAIpB,cAAc,CAACC,IAAD,EAAOC,QAAP,EAAiB,EAC3D,GAAGC,MADwD;AAE3DC,QAAAA,IAAI,EAAE,EACF,GAAGD,MAAM,CAACC,IADR;AAEFC,UAAAA,QAAQ,EAAE,CAAC,GAAGe,sBAAJ,EAA4B,GAAGb,cAA/B;AAFR;AAFqD,OAAjB,CAL3C,EAWCc,KAXD,EAAP;AAYH;AACJ,GAtBkE,CAuBnE;;;AACA,SAAOrB,cAAc,CAACC,IAAD,EAAOC,QAAP,EAAiBC,MAAjB,CAArB;AACH,CAzBD;;AA2BA,eAAeJ,gBAAf","sourcesContent":["/**\n * Convert a `File` object returned by the upload input into a base 64 string.\n * That's not the most optimized way to store images in production, but it's\n * enough to illustrate the idea of data provider decoration.\n */\nconst convertFileToBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file.rawFile);\n\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n});\n\n/**\n * For posts update only, convert uploaded image in base 64 and attach it to\n * the `picture` sent property, with `src` and `title` attributes.\n */\nconst addUploadFeature = requestHandler => (type, resource, params) => {\n    if (type === 'UPDATE' && resource === 'posts') {\n        // notice that following condition can be true only when `<ImageInput source=\"pictures\" />` component has parameter `multiple={true}`\n        // if parameter `multiple` is false, then data.pictures is not an array, but single object\n        if (params.data.pictures && params.data.pictures.length) {\n            // only freshly dropped pictures are instance of File\n            const formerPictures = params.data.pictures.filter(p => !(p.rawFile instanceof File));\n            const newPictures = params.data.pictures.filter(p => p.rawFile instanceof File);\n\n            return Promise.all(newPictures.map(convertFileToBase64))\n                .then(base64Pictures => base64Pictures.map((picture64, index) => ({\n                    src: picture64,\n                    title: `${newPictures[index].title}`,\n                })))\n                .then(transformedNewPictures => requestHandler(type, resource, {\n                    ...params,\n                    data: {\n                        ...params.data,\n                        pictures: [...transformedNewPictures, ...formerPictures],\n                    },\n                })).catch();\n        }\n    }\n    // for other request types and resources, fall back to the default request handler\n    return requestHandler(type, resource, params);\n};\n\nexport default addUploadFeature;\n"]},"metadata":{},"sourceType":"module"}
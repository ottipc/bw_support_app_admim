{"ast":null,"code":"var _jsxFileName = \"/home/codi/Entwicklung/workspace-webstorm/idendity-admin/src/comp/rolelistbox.js\";\nimport React from 'react';\nimport DualListBox from 'react-dual-listbox';\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\nimport { UserRightBox } from \"./userrightlistbox\";\nimport apiService from '../api/apiService';\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { NotificationContainer } from 'react-notifications';\nimport { createNotification } from './Notification';\nimport 'font-awesome/css/font-awesome.css';\nimport 'react-notifications/lib/notifications.css';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n/**\n * style\n *\n * @type {((props?: any) => ClassNameMap<string>) | *}\n */\n\nconst useStyles = makeStyles(theme => ({\n  list: {\n    width: 250\n  },\n  fullList: {\n    width: 'auto'\n  },\n  root: {//flexGrow: 1,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n}));\n/**\n * standard value for user role box\n *\n * @type {*[]}\n */\n\nconst options = [{\n  value: 'one',\n  label: 'Option One'\n}, {\n  value: 'two',\n  label: 'Option Two'\n}];\n/**\n *\n * Component for setting user-role-box\n * be shown in user.js\n *\n * @component\n *\n */\n\nexport class RoleListBox extends React.Component {\n  /**\n   *  CONSTRUCT user-role-box\n   *\n   * @param props\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: ['1', '2']\n    };\n\n    this.onChange = selected => {\n      //alert(selected)\n      this.setState({\n        selected: selected,\n        userroles: selected\n      }); //UserRightBox.getDerivedStateFromProps()\n    };\n\n    console.log(\"*** CONSTRUCT ROLE LIST BOX ***\");\n    console.log(props);\n    let id_user = props.id_user;\n    console.log(id_user);\n    this.state = {\n      allrolesrow: [],\n      allroles: [],\n      userroles: [],\n      deletedroles: [],\n      selected: [1],\n      initialroles: [],\n      relationobjects: []\n    };\n  }\n  /**\n   *\n   * invoke JUST ONCE onload or reload\n   *\n   * @function\n   *\n   */\n\n\n  componentDidMount() {\n    console.log(\"*** ROLE LIST BOX DID MOUNT ***\");\n    this.setAllRolesToState();\n    this.getUserRolesToState();\n  }\n  /**\n   *\n   * send HTTP request to get User Roles\n   * save UserRoles to the state\n   *\n   * @function\n   */\n\n\n  getUserRolesToState() {\n    let userroles = [];\n    let relations = [];\n    console.log(this.props);\n    apiService.fetchRoleListForUser(this.props.id_user).then(response => response).then(response => {\n      response.data.map(function (val) {\n        userroles.push(val.id_role);\n        relations.push(val);\n      });\n      this.setState({\n        selected: userroles,\n        initialroles: userroles,\n        relationobjects: relations\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  /**\n   *\n   * send HTTP request to get All Roles\n   * save AllRoles to the state\n   *\n   * @function\n   */\n\n\n  setAllRolesToState() {\n    apiService.fetchAllRoleObjects().then(response => {\n      this.setState({\n        allrolesraw: response.data,\n        allroles: JSON.stringify(response.data)\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  /**\n   *\n   * function for editing user-role-box\n   * create a new role to user\n   * remove a role from user\n   *\n   * @param event\n   * @function\n   */\n\n\n  updateRoles(event) {\n    event.preventDefault();\n\n    if (this) {\n      let initials = this.state.initialroles;\n      let selected = this.state.selected;\n      let currentUserId = this.props.id_user;\n      let realtions = this.state.relationobjects;\n      let toCreate = [];\n      let toDelete = [];\n      this.state.allrolesraw.map(function (val) {\n        console.log(\"------- VALUE  ----------------\"); //  console.log(val.id);\n\n        let roleId = val.id;\n\n        if (initials.includes(roleId) && !selected.includes(roleId)) {\n          let idToDelete = realtions.map(function (val) {\n            //console.log(JSON.stringify(val));\n            let definedRelation = JSON.parse(JSON.stringify(val));\n\n            if (definedRelation.id_user == currentUserId && definedRelation.id_role == roleId) {\n              confirmAlert({\n                title: 'Confirm to submit',\n                message: 'Are you sure you want to delete Role from User.',\n                buttons: [{\n                  label: 'Yes',\n                  onClick: () => {\n                    toDelete.push(roleId);\n                    console.log(\"------- to delete  ----------------\");\n                    console.log(definedRelation.id);\n                    apiService.deleteUserRole(definedRelation.id);\n                    createNotification(\"warning\", \"Role deleted\", \"Role for User deleted\");\n                    return definedRelation.id;\n                  }\n                }, {\n                  label: 'No',\n                  onClick: () => console.log(\"-----NO-----\")\n                }]\n              });\n            }\n          });\n        } else if (!initials.includes(roleId) && selected.includes(roleId)) {\n          toCreate.push(roleId); //only possible to post one entry\n\n          apiService.createUserRole({\n            \"id_role\": roleId,\n            \"id_user\": currentUserId\n          });\n          createNotification(\"success\", \"Role saved\", \"Role for User persisted\");\n        }\n      });\n    }\n  }\n  /**\n   * invoke whenever there is a change\n   *\n   * @param selected\n   * @function\n   */\n\n\n  /**\n   *\n   * @param text\n   * @function\n   */\n  changingRightsChild(text) {}\n  /**\n   * rendering role list box\n   * @returns {*}\n   */\n\n\n  render() {\n    if (this.state.allroles && this.state.allroles.length > 0) {\n      const parsedJsonObject = JSON.parse(this.state.allroles.replace(/id/g, \"value\").replace(/name/g, \"label\"));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DualListBox, {\n        showHeaderLabels: \"true\",\n        options: parsedJsonObject,\n        selected: this.state.selected,\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(NotificationContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(ExpansionPanel, {\n        defaultExpanded: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        className: useStyles.heading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }\n      }, \"Rights of User\"), /*#__PURE__*/React.createElement(ExpansionPanelDetails, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(UserRightBox, {\n        selected: this.state.selected,\n        userid: this.props.id_user,\n        k: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"sabu\",\n        onChange: e => this.changingRightsChild(e.target.value),\n        onClick: event => this.updateRoles(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-save\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 66\n        }\n      }), \"Save\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DualListBox, {\n      options: options,\n      selected: this.state.selected,\n      icons: {\n        moveLeft: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"fa fa-chevron-left\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 49\n          }\n        }),\n        moveAllLeft: [/*#__PURE__*/React.createElement(\"span\", {\n          key: 0,\n          className: \"fa fa-chevron-left\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 43\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          key: 1,\n          className: \"fa fa-chevron-left\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 43\n          }\n        })],\n        moveRight: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"fa fa-chevron-right\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 50\n          }\n        }),\n        moveAllRight: [/*#__PURE__*/React.createElement(\"span\", {\n          key: 0,\n          className: \"fa fa-chevron-right\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 43\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          key: 1,\n          className: \"fa fa-chevron-right\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 43\n          }\n        })],\n        moveDown: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"fa fa-chevron-down\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 49\n          }\n        }),\n        moveUp: /*#__PURE__*/React.createElement(\"span\", {\n          className: \"fa fa-chevron-up\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 47\n          }\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 24\n      }\n    }));\n  }\n\n}\nexport default RoleListBox;","map":{"version":3,"sources":["/home/codi/Entwicklung/workspace-webstorm/idendity-admin/src/comp/rolelistbox.js"],"names":["React","DualListBox","UserRightBox","apiService","ExpansionPanel","Typography","ExpansionPanelDetails","makeStyles","NotificationContainer","createNotification","confirmAlert","useStyles","theme","list","width","fullList","root","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","paper","padding","spacing","textAlign","options","value","label","RoleListBox","Component","constructor","props","state","selected","onChange","setState","userroles","console","log","id_user","allrolesrow","allroles","deletedroles","initialroles","relationobjects","componentDidMount","setAllRolesToState","getUserRolesToState","relations","fetchRoleListForUser","then","response","data","map","val","push","id_role","catch","err","fetchAllRoleObjects","allrolesraw","JSON","stringify","updateRoles","event","preventDefault","initials","currentUserId","realtions","toCreate","toDelete","roleId","id","includes","idToDelete","definedRelation","parse","title","message","buttons","onClick","deleteUserRole","createUserRole","changingRightsChild","render","length","parsedJsonObject","replace","e","target","moveLeft","moveAllLeft","moveRight","moveAllRight","moveDown","moveUp"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DualListBox from 'react-dual-listbox';\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\nimport {UserRightBox} from \"./userrightlistbox\";\nimport apiService from '../api/apiService';\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {NotificationContainer} from 'react-notifications';\nimport {createNotification} from './Notification';\nimport 'font-awesome/css/font-awesome.css'\nimport 'react-notifications/lib/notifications.css';\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\n\n\n/**\n * style\n *\n * @type {((props?: any) => ClassNameMap<string>) | *}\n */\nconst useStyles = makeStyles((theme) => ({\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n    root: {\n        //flexGrow: 1,\n    }, heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\n/**\n * standard value for user role box\n *\n * @type {*[]}\n */\nconst options = [{\n    value: 'one',\n    label: 'Option One'\n},\n    {\n        value: 'two',\n        label: 'Option Two'\n    },\n];\n\n/**\n *\n * Component for setting user-role-box\n * be shown in user.js\n *\n * @component\n *\n */\nexport class RoleListBox extends React.Component {\n\n    state = {\n        selected: ['1', '2']\n    };\n\n    /**\n     *  CONSTRUCT user-role-box\n     *\n     * @param props\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        console.log(\"*** CONSTRUCT ROLE LIST BOX ***\");\n        console.log(props);\n        let id_user = props.id_user;\n        console.log(id_user);\n\n\n        this.state = {\n            allrolesrow: [],\n            allroles: [],\n            userroles: [],\n            deletedroles: [],\n            selected: [1],\n            initialroles: [],\n            relationobjects: []\n        };\n\n    }\n\n    /**\n     *\n     * invoke JUST ONCE onload or reload\n     *\n     * @function\n     *\n     */\n    componentDidMount() {\n        console.log(\"*** ROLE LIST BOX DID MOUNT ***\");\n        this.setAllRolesToState();\n        this.getUserRolesToState();\n\n    }\n\n    /**\n     *\n     * send HTTP request to get User Roles\n     * save UserRoles to the state\n     *\n     * @function\n     */\n    getUserRolesToState() {\n        let userroles = [];\n        let relations = [];\n        console.log(this.props)\n        apiService.fetchRoleListForUser(this.props.id_user).then(response => response)\n            .then(response => {\n                response.data.map(function (val) {\n                    userroles.push(val.id_role);\n                    relations.push(val);\n                });\n                this.setState({\n                    selected: userroles,\n                    initialroles: userroles,\n                    relationobjects: relations\n                })\n            }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    /**\n     *\n     * send HTTP request to get All Roles\n     * save AllRoles to the state\n     *\n     * @function\n     */\n    setAllRolesToState() {\n        apiService.fetchAllRoleObjects().then(response => {\n            this.setState({\n                allrolesraw: response.data,\n                allroles: JSON.stringify(response.data)\n            })\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    /**\n     *\n     * function for editing user-role-box\n     * create a new role to user\n     * remove a role from user\n     *\n     * @param event\n     * @function\n     */\n    updateRoles(event) {\n        event.preventDefault();\n        if (this) {\n            let initials = this.state.initialroles;\n            let selected = this.state.selected;\n            let currentUserId = this.props.id_user;\n            let realtions = this.state.relationobjects;\n            let toCreate = [];\n            let toDelete = [];\n\n\n            this.state.allrolesraw.map(function (val) {\n\n                console.log(\"------- VALUE  ----------------\");\n              //  console.log(val.id);\n                let roleId = val.id;\n                if (initials.includes(roleId) && !selected.includes(roleId)) {\n                    let idToDelete = realtions.map(function (val) {\n                        //console.log(JSON.stringify(val));\n                        let definedRelation = JSON.parse(JSON.stringify(val));\n                        if (definedRelation.id_user == currentUserId && definedRelation.id_role == roleId) {\n\n                            confirmAlert({\n                                title: 'Confirm to submit',\n                                message: 'Are you sure you want to delete Role from User.',\n                                buttons: [\n                                    {\n                                        label: 'Yes',\n                                        onClick: () => {\n                                            toDelete.push(roleId);\n                                            console.log(\"------- to delete  ----------------\");\n                                            console.log(definedRelation.id);\n                                            apiService.deleteUserRole(definedRelation.id);\n                                            createNotification(\"warning\", \"Role deleted\", \"Role for User deleted\");\n                                            return definedRelation.id;\n                                        }\n                                    },\n                                    {\n                                        label: 'No',\n                                        onClick: () => console.log(\"-----NO-----\")\n                                    }\n                                ]\n                            });\n                        }\n                    });\n\n                } else if (!initials.includes(roleId) && selected.includes(roleId)) {\n                    toCreate.push(roleId);\n                    //only possible to post one entry\n                    apiService.createUserRole({\"id_role\": roleId, \"id_user\": currentUserId});\n                    createNotification(\"success\", \"Role saved\", \"Role for User persisted\");\n                }\n            });\n        }\n    }\n\n\n    /**\n     * invoke whenever there is a change\n     *\n     * @param selected\n     * @function\n     */\n    onChange = (selected) => {\n        //alert(selected)\n        this.setState({\n            selected: selected,\n            userroles: selected\n        });\n        //UserRightBox.getDerivedStateFromProps()\n    };\n\n    /**\n     *\n     * @param text\n     * @function\n     */\n    changingRightsChild(text) {\n    }\n\n\n\n\n    /**\n     * rendering role list box\n     * @returns {*}\n     */\n    render() {\n        if (this.state.allroles && this.state.allroles.length > 0) {\n            const parsedJsonObject = JSON.parse(this.state.allroles.replace(/id/g, \"value\").replace(/name/g, \"label\"));\n\n            return (<div >\n                <DualListBox showHeaderLabels=\"true\" options={parsedJsonObject} selected={this.state.selected}\n                             onChange={this.onChange}/>\n\n                <NotificationContainer/>\n                <ExpansionPanel defaultExpanded={true}>\n                    <Typography className={useStyles.heading}>Rights of User</Typography>\n                    <ExpansionPanelDetails >\n                        <UserRightBox selected={this.state.selected} userid={this.props.id_user} k />\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n                <button\n                    className=\"sabu\"\n                    onChange={(e) => this.changingRightsChild(e.target.value)}\n                    onClick={(event) => this.updateRoles(event)}><i className=\"fa fa-save\"></i>\n                    Save\n                </button>\n            </div>);\n\n        }\n        return (<div  ><DualListBox  options={options} selected={this.state.selected}\n                                  icons={{\n                                      moveLeft: <span className=\"fa fa-chevron-left\"/>,\n                                      moveAllLeft: [\n                                          <span key={0} className=\"fa fa-chevron-left\"/>,\n                                          <span key={1} className=\"fa fa-chevron-left\"/>,\n                                      ],\n                                      moveRight: <span className=\"fa fa-chevron-right\"/>,\n                                      moveAllRight: [\n                                          <span key={0} className=\"fa fa-chevron-right\"/>,\n                                          <span key={1} className=\"fa fa-chevron-right\"/>,\n                                      ],\n                                      moveDown: <span className=\"fa fa-chevron-down\"/>,\n                                      moveUp: <span className=\"fa fa-chevron-up\"/>,\n                                  }}\n\n\n                                   /></div>);\n    }\n}\n\nexport default RoleListBox;\n"]},"metadata":{},"sourceType":"module"}
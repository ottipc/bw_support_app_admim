{"ast":null,"code":"var _jsxFileName = \"/home/codi/Entwicklung/workspace-webstorm/question_app_admin/src/api/apiService.js\";\nimport dataProvider from '../api/dataProvider';\nimport React from 'react';\nimport axios from \"axios\";\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\n\nexport const ApiService = props => {\n  const value = {};\n  return React.createElement(ApiService.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, props.children);\n};\n/**\n *\n *  get the right that belong to specified role\n *\n * @type {{deleteUserRole: myApiService.deleteUserRole, fetchRightObjectsFOrId: (function(*=): (*|Promise<unknown>)), fetchAllRights: (function(*, *): Promise<GetListResult>), createUserRole: myApiService.createUserRole, fetchRightIdsForRoles: (function(*=): (*|Promise<unknown>)), fetchAllRoleObjects: (function(): Promise<GetListResult>), fetchRoleListForUser: (function(string): Promise<GetListResult>)}}\n */\n\nconst myApiService = {\n  fetchRightIdsForRoles: function (roleIds) {\n    return dataProvider.getManyOr('role_right', {\n      id_role: roleIds\n    });\n  },\n\n  /**\n   *\n   * Insert//assign a relation of RoleRight.\n   *\n   * @param userRightIds\n   * @returns {*|Promise<unknown>}\n   */\n  uploadFiles: function (userRightIds) {\n    return dataProvider.getManyOr('right', {\n      id: userRightIds\n    });\n  },\n\n  /**\n   *\n   * Insert//assign a relation of RoleRight.\n   *\n   * @param userRightIds\n   * @returns {*|Promise<unknown>}\n   */\n  fetchRightObjectsFOrId: function (userRightIds) {\n    return dataProvider.getManyOr('right', {\n      id: userRightIds\n    });\n  },\n  uploadPic: function (formData, filename) {\n    return axios.post(\"http://o.ssystems.de:8079/uploadFile?name=\" + this.state.selectedFile.name, formData, config).then(response => {\n      console.log(response);\n    }, error => {\n      console.log(error);\n    });\n  },\n\n  /**\n   * get all rights\n   *\n   * @param resource\n   * @param params\n   * @returns {Promise<GetListResult>}\n   */\n  fetchAllRights: function (resource, params) {\n    return dataProvider.getList('right', {\n      pagination: {\n        page: 1,\n        perPage: 20\n      },\n      sort: {\n        field: 'name',\n        order: 'asc'\n      },\n      filter: {}\n    });\n  },\n\n  /* fetchAllUserObjects: function () {\n       return dataProvider.getList('user', {\n           pagination: {\n               page: 1,\n               perPage: 20\n           },\n           sort: {\n               field: 'name',\n               order: 'asc'\n           },\n           filter: {},\n       })\n   },\n  */\n\n  /**\n   *\n   * getting all Roles\n   *\n   * @returns {Promise<GetListResult>}\n   */\n  fetchAllRoleObjects: function () {\n    return dataProvider.getList('role', {\n      pagination: {\n        page: 1,\n        perPage: 20\n      },\n      sort: {\n        field: 'name',\n        order: 'asc'\n      },\n      filter: {}\n    });\n  },\n\n  /**\n   *  Getting all Roles for a specified user.\n   *\n   * @param userId\n   * @returns {Promise<GetListResult>}\n   */\n  fetchRoleListForUser: function (userId) {\n    return dataProvider.getList('user_role', {\n      pagination: {\n        page: 1,\n        perPage: 50\n      },\n      sort: {\n        field: 'id',\n        order: 'asc'\n      },\n      filter: {\n        id_user: userId\n      }\n    });\n  },\n\n  /**\n   * assign roles to User\n   *\n   * @param payload\n   */\n  createUserRole: function (payload) {\n    dataProvider.create('user_role', {\n      data: payload\n    }).then(response => {// success side effects go here\n    }).catch(error => {\n      console.log(error);\n    });\n  },\n\n  /**\n   * remove roles from User\n   *\n   * @param userRoleId\n   */\n  deleteUserRole: function (userRoleId) {\n    dataProvider.delete('user_role', {\n      id: userRoleId\n    }).then(response => {// success side effects go here\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n};\nexport default myApiService;","map":{"version":3,"sources":["/home/codi/Entwicklung/workspace-webstorm/question_app_admin/src/api/apiService.js"],"names":["dataProvider","React","axios","ApiService","props","value","children","myApiService","fetchRightIdsForRoles","roleIds","getManyOr","id_role","uploadFiles","userRightIds","id","fetchRightObjectsFOrId","uploadPic","formData","filename","post","state","selectedFile","name","config","then","response","console","log","error","fetchAllRights","resource","params","getList","pagination","page","perPage","sort","field","order","filter","fetchAllRoleObjects","fetchRoleListForUser","userId","id_user","createUserRole","payload","create","data","catch","deleteUserRole","userRoleId","delete"],"mappings":"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","sourcesContent":["import dataProvider from '../api/dataProvider';\nimport React from 'react';\nimport axios from \"axios\";\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const ApiService = (props) => {\n    const value = {};\n\n    return (\n        <ApiService.Provider value={value}>\n            {props.children}\n        </ApiService.Provider>\n    );\n};\n/**\n *\n *  get the right that belong to specified role\n *\n * @type {{deleteUserRole: myApiService.deleteUserRole, fetchRightObjectsFOrId: (function(*=): (*|Promise<unknown>)), fetchAllRights: (function(*, *): Promise<GetListResult>), createUserRole: myApiService.createUserRole, fetchRightIdsForRoles: (function(*=): (*|Promise<unknown>)), fetchAllRoleObjects: (function(): Promise<GetListResult>), fetchRoleListForUser: (function(string): Promise<GetListResult>)}}\n */\n\nconst myApiService = {\n    fetchRightIdsForRoles: function (roleIds) {\n        return dataProvider.getManyOr('role_right', {\n            id_role: roleIds\n        });\n    },\n\n\n\n    /**\n     *\n     * Insert//assign a relation of RoleRight.\n     *\n     * @param userRightIds\n     * @returns {*|Promise<unknown>}\n     */\n    uploadFiles: function (userRightIds) {\n        return dataProvider.getManyOr('right', {\n            id: userRightIds\n        });\n    },\n\n\n\n    /**\n     *\n     * Insert//assign a relation of RoleRight.\n     *\n     * @param userRightIds\n     * @returns {*|Promise<unknown>}\n     */\n    fetchRightObjectsFOrId: function (userRightIds) {\n        return dataProvider.getManyOr('right', {\n            id: userRightIds\n        });\n    },\n\n    uploadPic: function (formData, filename) {\n        return axios.post(\"http://o.ssystems.de:8079/uploadFile?name=\" + this.state.selectedFile.name, formData, config).then((response) => {\n            console.log(response);\n        }, (error) => {\n            console.log(error)\n        });\n    },\n\n\n    /**\n     * get all rights\n     *\n     * @param resource\n     * @param params\n     * @returns {Promise<GetListResult>}\n     */\n    fetchAllRights: function (resource, params) {\n        return dataProvider.getList('right', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'asc'\n            },\n            filter: {},\n        });\n    },\n\n   /* fetchAllUserObjects: function () {\n        return dataProvider.getList('user', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'asc'\n            },\n            filter: {},\n        })\n    },\n*/\n\n    /**\n     *\n     * getting all Roles\n     *\n     * @returns {Promise<GetListResult>}\n     */\n    fetchAllRoleObjects: function () {\n        return dataProvider.getList('role', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'asc'\n            },\n            filter: {},\n        })\n    },\n\n    /**\n     *  Getting all Roles for a specified user.\n     *\n     * @param userId\n     * @returns {Promise<GetListResult>}\n     */\n    fetchRoleListForUser: function (userId) {\n        return dataProvider.getList('user_role', {\n            pagination: {\n                page: 1,\n                perPage: 50\n            },\n            sort: {\n                field: 'id',\n                order: 'asc'\n            },\n            filter: {\n                id_user: userId\n            },\n        });\n    },\n\n    /**\n     * assign roles to User\n     *\n     * @param payload\n     */\n\n    createUserRole: function (payload) {\n        dataProvider\n            .create('user_role', {data: payload})\n            .then(response => {\n                // success side effects go here\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    },\n    /**\n     * remove roles from User\n     *\n     * @param userRoleId\n     */\n    deleteUserRole: function (userRoleId) {\n        dataProvider\n            .delete('user_role', {id: userRoleId})\n            .then(response => {\n                // success side effects go here\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n};\n\n\nexport default myApiService\n"]},"metadata":{},"sourceType":"module"}
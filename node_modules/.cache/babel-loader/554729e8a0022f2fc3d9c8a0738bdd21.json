{"ast":null,"code":"import { fetchUtils } from 'react-admin';\nimport postgrestRestProvider from \"@raphiniert/ra-data-postgrest\";\n\nrequire('dotenv').config();\n\nexport const API_URL = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_PROD_API_URL : process.env.REACT_APP_DEV_API_URL;\n/**\n *\n * dataProvider configurations\n *  Authorization Token for the API\n *\n * @param url\n * @param options\n * @returns {Promise<{status: number; headers: Headers; body: string; json: any}>}\n */\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({\n      Accept: 'application/json'\n    });\n  }\n\n  options.headers.set('Authorization', process.env.REACT_APP_API_KEY);\n  return fetchUtils.fetchJson(url, options);\n};\n/**\n * send the Authorization Token in header\n * @type {DataProvider}\n */\n\n\nconsole.log(\"-----------------------\");\nconsole.log(API_URL);\nconsole.log(\"-----------------------\");\nconst dataProvider = postgrestRestProvider(API_URL, httpClient);\n\nfunction buildAndQuery(prop, params) {\n  let querystring = \"\";\n\n  for (prop in params.filter) {\n    console.log(\"PROPERTY : \" + prop);\n    console.log(\"params  \" + params.filter[prop]);\n    querystring = \"&\" + prop + \"=ilike.\" + params.filter[prop] + \"%\";\n\n    if (prop === 'addressid' || 'id_role' || 'id_right' || 'id_user') {\n      querystring = \"&\" + prop + \"=eq.\" + params.filter[prop];\n    }\n  }\n\n  return querystring;\n}\n/**\n *\n * Extending the Dataprovider Functionality to build OR Queries on the Api.\n * The function takes a list of params and their keys to query the specified table with an or.\n *\n * @type {{[p: string]: any, deleteMany: (resource: string, params: DeleteManyParams) => Promise<DeleteManyResult>, updateMany: (resource: string, params: UpdateManyParams) => Promise<UpdateManyResult>, getList: (resource: string, params: GetListParams) => Promise<GetListResult>, getMany: (resource: string, params: GetManyParams) => Promise<GetManyResult>, getManyReference: (resource: string, params: GetManyReferenceParams) => Promise<GetManyReferenceResult>, getOne: (resource: string, params: GetOneParams) => Promise<GetOneResult>, update: (resource: string, params: UpdateParams) => Promise<UpdateResult>, create: (resource: string, params: CreateParams) => Promise<CreateResult>, getManyOr: (function(*, *): Promise<{data: *}>), delete: (resource: string, params: DeleteParams) => Promise<DeleteResult>}}\n */\n\n\nconst myDataProvider = { ...dataProvider,\n\n  /*getList: (resource, params) => {\n      const { page, perPage } = params.pagination;\n      const { field, order } = params.sort;\n      const query = {\n          sort: JSON.stringify([field, order]),\n          range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n          filter: JSON.stringify(params.filter),\n      };\n      const url = `${API_URL}/${resource}?${JSON.stringify(query)}`;\n       return httpClient(url).then(({ headers, json }) => ({\n  //            data: json,\n          data: json.map(resource => ({ ...resource, id: resource.addressid }) ),\n          total: parseInt(headers.get('content-range').split('/').pop(), 10),\n      }));\n  },*/\n  getList: function (resource, params) {\n    console.log(\"IN GET LIST\");\n    console.log(\"PARAMS : \" + JSON.stringify(params));\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const {\n      field,\n      order\n    } = params.sort;\n    console.log(\"PER PAGE : \" + perPage);\n    console.log(\"FIELD : \" + field);\n    console.log(\"ORDER : \" + order);\n    console.log(\"PAGE : \" + page);\n    console.log(\"FILTER : \" + JSON.stringify(params.filter));\n    let limit = perPage;\n    let offset = (page - 1) * perPage;\n    let prop; //let headers = {};\n\n    let options = {};\n    options.headers = new Headers({\n      'Prefer': 'count=exact'\n    });\n    options.headers.set('Prefer', `count=exact`); //let shit = httpClient(url, options).then(function (_ab) {\n    //            console.log(\"COUNT RESPONSE : \" + JSON.stringify(_ab));\n    //            return  _ab;\n    //});\n\n    let querystring = buildAndQuery(prop, params);\n    var responseheaders = {};\n    let url = API_URL + \"/\" + resource + \"?limit=\" + limit + \"&offset=\" + offset + \"&order=\" + field + \".\" + order.toLowerCase() + querystring;\n\n    if (resource === 'students') {\n      url = API_URL + \"/\" + resource + \"?limit=\" + limit + \"&offset=\" + offset + \"&order=\" + field.replace(\"id\", \"addressid\") + \".\" + order.toLowerCase() + querystring;\n    } else if (resource === 'persons') {\n      url = API_URL + \"/\" + resource + \"?limit=\" + limit + \"&offset=\" + offset + \"&order=\" + field + \".\" + order.toLowerCase() + querystring;\n    } //let url = API_URL + \"/\" + resource;\n\n\n    console.log(\"URL : \" + url);\n    return httpClient(url, options).then(response => {\n      responseheaders = response.headers;\n      let contentrange = [0, 100];\n\n      for (var pair of response.headers.entries()) {\n        console.log(pair[0] + ': ' + pair[1]);\n\n        if (pair[0] === 'content-range') {\n          contentrange = pair[1].split('/');\n          console.log(\"PAIR : \" + pair[1]);\n          console.log(\"RANGE AFTER SPLIT : \" + contentrange);\n        }\n      }\n\n      let jsondata = response.json; //console.log(\"RESPONSE : \" + JSON.stringify(responseheaders));\n      //console.log(\"RESOURCE : \" + resource);\n\n      if (resource === \"students\") {\n        //FIXME Maybe we dont need the .replace\n        jsondata = JSON.parse(JSON.stringify(jsondata).replace(\"\\\"id\\\":\", \"\\\"addressid\\\":\")).map(resource => ({ ...resource,\n          id: resource.addressid\n        }));\n      }\n\n      console.log(\"JOSN : \" + JSON.stringify(jsondata)); //let totalamount = parseInt(headers.get('content-range').split('/').pop(), 10);\n\n      console.log(\"AMOUNT : \" + contentrange[1]);\n      var totalcount = parseInt(contentrange[1]);\n      return {\n        data: jsondata,\n        total: totalcount\n      };\n    });\n  },\n  getOne: function (resource, params) {\n    console.log(\"IN GET ONE\");\n    let url = API_URL + \"/\" + resource + \"?id=eq.\" + params.id;\n\n    if (resource === \"students\") {\n      url = API_URL + \"/\" + resource + \"?addressid=eq.\" + params.id;\n    }\n\n    console.log(\"IN GET ONE URL : \" + url);\n    return httpClient(url).then(function (_a) {\n      let json = _a.json;\n      console.log(\"RESOURCE GET ONE : \" + resource);\n\n      if (resource === \"students\") {\n        json = JSON.parse(JSON.stringify(_a.json).replace(\"\\\"id\\\":\", \"\\\"addressid\\\":\")).map(resource => ({ ...resource,\n          id: resource.addressid\n        }));\n      }\n\n      console.log(\"JOSN GET ONE: \" + JSON.stringify(json));\n      return {\n        data: json\n      };\n    });\n  },\n  getManyOr: function (resource, params) {\n    let prop;\n    let queryparam;\n    let queryValues = [];\n\n    for (prop in params) {\n      if (params.hasOwnProperty(prop)) {\n        let key = prop;\n        let valueArray = params[key];\n\n        for (queryparam in valueArray) {\n          let queryString = key + \".eq.\" + valueArray[queryparam];\n          queryValues.push(queryString);\n          console.log(\"key \" + key);\n        }\n      }\n    }\n\n    let queryids = queryValues.join(\",\");\n    let queerystring = !queryids ? \"id=eq.-1\" : \"or=(\" + queryids + \")\";\n\n    if (resource === \"students\") {\n      queerystring = !queryids ? \"addressid=eq.-1\" : \"or=(\" + queryids + \")\";\n    }\n\n    let url = API_URL + \"/\" + resource + \"?\" + queerystring;\n    return httpClient(url).then(function (_a) {\n      var json = _a.json;\n      return {\n        data: json\n      };\n    });\n  },\n  create: function (resource, params) {\n    console.log(\"tset id\");\n    return httpClient(API_URL + \"/\" + resource, {\n      method: 'POST',\n      headers: new Headers({\n        'Accept': 'application/vnd.pgrst.object+json',\n        'Prefer': 'return=representation',\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(params.data)\n    }).then(function (_a) {\n      console.log(\"_a\");\n      console.log(_a);\n      var json = _a.json;\n      console.log(\"json\");\n      console.log(json);\n      return {\n        data: (({}, params.data), {\n          id: json.id\n        })\n      };\n    });\n  }\n};\nexport default myDataProvider;","map":{"version":3,"sources":["/home/codi/Entwicklung/workspace-webstorm/idendity-admin/src/api/dataProvider.js"],"names":["fetchUtils","postgrestRestProvider","require","config","API_URL","process","env","NODE_ENV","REACT_APP_PROD_API_URL","REACT_APP_DEV_API_URL","httpClient","url","options","headers","Headers","Accept","set","REACT_APP_API_KEY","fetchJson","console","log","dataProvider","buildAndQuery","prop","params","querystring","filter","myDataProvider","getList","resource","JSON","stringify","page","perPage","pagination","field","order","sort","limit","offset","responseheaders","toLowerCase","replace","then","response","contentrange","pair","entries","split","jsondata","json","parse","map","id","addressid","totalcount","parseInt","data","total","getOne","_a","getManyOr","queryparam","queryValues","hasOwnProperty","key","valueArray","queryString","push","queryids","join","queerystring","create","method","body"],"mappings":"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","sourcesContent":["import {fetchUtils} from 'react-admin';\nimport postgrestRestProvider from \"@raphiniert/ra-data-postgrest\";\nrequire('dotenv').config();\n\nexport const API_URL = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_PROD_API_URL : process.env.REACT_APP_DEV_API_URL;\n\n\n/**\n *\n * dataProvider configurations\n *  Authorization Token for the API\n *\n * @param url\n * @param options\n * @returns {Promise<{status: number; headers: Headers; body: string; json: any}>}\n */\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({Accept: 'application/json'});\n    }\n\n    options.headers.set('Authorization', process.env.REACT_APP_API_KEY);\n    return fetchUtils.fetchJson(url, options);\n\n};\n\n\n/**\n * send the Authorization Token in header\n * @type {DataProvider}\n */\n\nconsole.log(\"-----------------------\");\nconsole.log(API_URL);\nconsole.log(\"-----------------------\");\n\nconst dataProvider = postgrestRestProvider(API_URL, httpClient);\n\nfunction buildAndQuery(prop, params) {\n    let querystring = \"\";\n    for (prop in params.filter) {\n        console.log(\"PROPERTY : \" + prop);\n        console.log( \"params  \" + params.filter[prop]);\n        querystring = \"&\" + prop + \"=ilike.\" + params.filter[prop] + \"%\";\n        if (prop === 'addressid' || 'id_role' || 'id_right' || 'id_user'){\n             querystring = \"&\" + prop + \"=eq.\" + params.filter[prop] ;\n        }\n    }\n    return querystring;\n}\n\n/**\n *\n * Extending the Dataprovider Functionality to build OR Queries on the Api.\n * The function takes a list of params and their keys to query the specified table with an or.\n *\n * @type {{[p: string]: any, deleteMany: (resource: string, params: DeleteManyParams) => Promise<DeleteManyResult>, updateMany: (resource: string, params: UpdateManyParams) => Promise<UpdateManyResult>, getList: (resource: string, params: GetListParams) => Promise<GetListResult>, getMany: (resource: string, params: GetManyParams) => Promise<GetManyResult>, getManyReference: (resource: string, params: GetManyReferenceParams) => Promise<GetManyReferenceResult>, getOne: (resource: string, params: GetOneParams) => Promise<GetOneResult>, update: (resource: string, params: UpdateParams) => Promise<UpdateResult>, create: (resource: string, params: CreateParams) => Promise<CreateResult>, getManyOr: (function(*, *): Promise<{data: *}>), delete: (resource: string, params: DeleteParams) => Promise<DeleteResult>}}\n */\nconst myDataProvider = {\n    ...dataProvider,\n    /*getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `${API_URL}/${resource}?${JSON.stringify(query)}`;\n\n        return httpClient(url).then(({ headers, json }) => ({\n//            data: json,\n            data: json.map(resource => ({ ...resource, id: resource.addressid }) ),\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },*/\n\n\n\n    getList: function (resource, params) {\n\n\n        console.log(\"IN GET LIST\");\n        console.log(\"PARAMS : \" + JSON.stringify(params));\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        console.log(\"PER PAGE : \" + perPage);\n        console.log(\"FIELD : \" + field);\n        console.log(\"ORDER : \" + order);\n        console.log(\"PAGE : \" + page);\n        console.log(\"FILTER : \" + JSON.stringify(params.filter));\n        let limit = perPage;\n        let offset = (page - 1) * perPage;\n        let prop;\n\n\n        //let headers = {};\n        let options={};\n        options.headers = new Headers({'Prefer': 'count=exact'});\n        options.headers.set('Prefer', `count=exact`);\n        //let shit = httpClient(url, options).then(function (_ab) {\n        //            console.log(\"COUNT RESPONSE : \" + JSON.stringify(_ab));\n        //            return  _ab;\n        //});\n\n\n        let querystring = buildAndQuery(prop, params);\n        var responseheaders = {};\n\n        let url = API_URL + \"/\" + resource +  \"?limit=\" + limit + \"&offset=\" + offset + \"&order=\" + field + \".\" + order.toLowerCase() + querystring;\n        if (resource === 'students'){\n\n            url = API_URL + \"/\" + resource +  \"?limit=\" + limit + \"&offset=\" + offset + \"&order=\" + field.replace(\"id\", \"addressid\") + \".\" + order.toLowerCase()  + querystring;\n        } else if (resource === 'persons'){\n            url = API_URL + \"/\" + resource +  \"?limit=\" + limit + \"&offset=\" + offset + \"&order=\"  + field + \".\" + order.toLowerCase() + querystring;\n        }\n        //let url = API_URL + \"/\" + resource;\n        console.log(\"URL : \" + url);\n        return httpClient(url, options).then((response) => {\n            responseheaders = response.headers;\n            let contentrange = [0,100];\n            for (var pair of response.headers.entries()) {\n                console.log(pair[0]+ ': '+ pair[1]);\n                if(pair[0]==='content-range'){\n                    contentrange = pair[1].split('/');\n                    console.log(\"PAIR : \" + pair[1]);\n                    console.log(\"RANGE AFTER SPLIT : \" + contentrange);\n                }\n            }\n            let jsondata = response.json;\n            //console.log(\"RESPONSE : \" + JSON.stringify(responseheaders));\n\n            //console.log(\"RESOURCE : \" + resource);\n\n            if(resource===\"students\"){\n                //FIXME Maybe we dont need the .replace\n                jsondata = JSON.parse(JSON.stringify(jsondata).replace(\"\\\"id\\\":\", \"\\\"addressid\\\":\")).map(resource => ({ ...resource, id: resource.addressid }));\n            }\n            console.log(\"JOSN : \" + JSON.stringify(jsondata));\n            //let totalamount = parseInt(headers.get('content-range').split('/').pop(), 10);\n            console.log(\"AMOUNT : \" + contentrange[1]);\n            var totalcount = parseInt(contentrange[1]);\n            return ({data: jsondata, total: totalcount});\n        })\n    },\n\n    getOne: function (resource, params) {\n\n      console.log(\"IN GET ONE\");\n\n      let url = API_URL + \"/\" + resource + \"?id=eq.\" + params.id;\n      if(resource===\"students\"){\n        url = API_URL + \"/\" + resource + \"?addressid=eq.\" + params.id;\n      }\n      console.log(\"IN GET ONE URL : \" + url);\n      return httpClient(url).then(function (_a) {\n          let json = _a.json;\n          console.log(\"RESOURCE GET ONE : \" + resource);\n          if(resource=== \"students\"){\n            json = JSON.parse(JSON.stringify(_a.json).replace(\"\\\"id\\\":\", \"\\\"addressid\\\":\")).map(resource => ({ ...resource, id: resource.addressid }));\n          }\n          console.log(\"JOSN GET ONE: \" + JSON.stringify(json));\n          return ({data: json});\n      });\n\n    },\n\n    getManyOr: function (resource, params) {\n\n        let prop;\n        let queryparam;\n        let queryValues = [];\n\n        for (prop in params) {\n            if (params.hasOwnProperty(prop)) {\n                let key = prop;\n                let valueArray = params[key];\n                for (queryparam in valueArray) {\n                    let queryString = key + \".eq.\" + valueArray[queryparam];\n                    queryValues.push(queryString);\n                    console.log(\"key \" + key)\n                }\n            }\n        }\n        let queryids = queryValues.join(\",\");\n        let queerystring = (!queryids) ? \"id=eq.-1\" : \"or=(\" + queryids + \")\";\n            if(resource===\"students\" ){\n                queerystring = (!queryids) ? \"addressid=eq.-1\" : \"or=(\" + queryids + \")\";\n      }\n        let url = API_URL + \"/\" + resource + \"?\" + queerystring;\n        return httpClient(url).then(function (_a) {\n            var json = _a.json;\n            return ({data: json});\n        });\n    },\n\n    create: function (resource, params) {\n        console.log(\"tset id\")\n        return httpClient(API_URL + \"/\" + resource, {\n            method: 'POST',\n            headers: new Headers({\n                'Accept': 'application/vnd.pgrst.object+json',\n                'Prefer': 'return=representation',\n                'Content-Type': 'application/json'\n            }),\n            body: JSON.stringify(params.data),\n\n        }).then(function (_a) {\nconsole.log(\"_a\")\n            console.log(_a)\n            var json = _a.json;\n            console.log( \"json\");\n            console.log( json);\n            return {\n                data: (({}, params.data), { id: json.id }),\n            };\n        });\n    },\n};\n\nexport default myDataProvider\n"]},"metadata":{},"sourceType":"module"}
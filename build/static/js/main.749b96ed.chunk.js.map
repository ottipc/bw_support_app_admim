{"version":3,"sources":["logo.svg","api/dataProvider.js","api/apiService.js","comp/Notification.js","comp/rightlistbox.js","role.js","comp/linkAnyFieldButton.js","comp/userrightlistbox.js","comp/rolelistbox.js","comp/table.js","usershow3.js","user_all.js","right.js","lang/en.js","lang/langProvider.js","MyAppBar.js","CustomLayout.js","profil.js","studium.js","csph.js","App.js","index.js"],"names":["module","exports","require","config","API_URL","process","httpClient","url","options","headers","Headers","Accept","set","delete","fetchUtils","fetchJson","console","log","dataProvider","postgrestRestProvider","myDataProvider","getList","resource","params","JSON","stringify","pagination","page","perPage","sort","field","order","filter","limit","offset","querystring","prop","buildAndQuery","then","response","contentrange","entries","pair","split","jsondata","json","parse","replace","map","id","addressid","data","total","parseInt","getOne","_a","getManyOr","queryparam","queryValues","hasOwnProperty","key","valueArray","queryString","push","queryids","join","queerystring","myApiService","fetchRightIdsForRoles","roleIds","id_role","fetchRightObjectsFOrId","userRightIds","fetchAllRights","fetchAllRoleObjects","fetchRoleListForUser","userId","id_user","createUserRole","payload","create","catch","error","deleteUserRole","userRoleId","createNotification","type","title","message","NotificationManager","info","success","warning","RightListBox","props","onChange","selected","setState","state","allRightsrow","allRights","roleRights","deletedRights","initialRights","relationobjects","handleClick","updateRights","bind","this","setAllRightsToState","getroleRightsToState","relations","fetchRightIdsForRole","val","id_right","err","record","apiService","allRightsraw","e","preventDefault","initials","currentRoleId","realtions","tocreate","todelete","rightId","includes","definedrelation","confirmAlert","buttons","label","onClick","relationId","createRoleRight","length","rig","created_at","updated_at","className","React","Component","RoleCreate","Create","SimpleForm","TextInput","source","RoleList","List","Datagrid","TextField","ReferenceManyField","reference","target","SingleFieldList","linkType","ReferenceField","ChipField","EditButton","RoleEdit","Edit","LinkAnyFieldButton","basepath","children","classes","to","relative","disabled","match","recordLink","startsWith","m","param","linkToRecord","completeTo","rest","history","location","staticContext","sanitizeRestProps","restClasses","link","sanitizeRestClasses","isDisabled","childElements","Children","count","cloneElement","Link","defaultProps","enhance","compose","withRouter","withStyles","cursor","shouldUpdate","nextProps","translate","basePath","updateState","text","UserRightBox","userroles","rightObjects","setRightOfUser","shown","prevProps","prevState","self","currentselected","roleRightResponse","userRightResponse","roleRightIds","value","index","rightResponse","rights","Chip","name","useStyles","makeStyles","theme","list","width","fullList","root","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","secondary","paper","padding","spacing","textAlign","RoleListBox","allrolesrow","allroles","deletedroles","initialroles","setAllRolesToState","getUserRolesToState","allrolesraw","event","currentUserId","toCreate","toDelete","roleId","definedRelation","parsedJsonObject","showHeaderLabels","ExpansionPanel","defaultExpanded","Typography","ExpansionPanelDetails","userid","k","changingRightsChild","updateRoles","icons","moveLeft","moveAllLeft","moveRight","moveAllRight","moveDown","moveUp","exmatreason","degreecode","degree","university","capr_nameeng","capr_degreeshort","isnotifiable","immatdate","exmatdate","Tbl","aid","sdata","axios","get","res","Table","TableHead","TableRow","TableCell","TableBody","container","minWidth","marginLeft","rightAlignedCell","boldCell","fontWeight","margin","spacer","height","UserShow","useShowController","Card","CardContent","Grid","item","xs","variant","gutterBottom","alignContent","anrede","surname","givenname","Paper","window","React2","React1","RightCreate","RightList","Fragment","simple","action","close","englishMessages","resources","user","fields","email","notifications","first_name","last_name","date_of_birth","city","role","priority","category","user_role","right","creatred_at","role_right","messages","de","default","polyglotI18nProvider","locale","flex","textOverflow","whiteSpace","overflow","logo","MyAppBar","AppBar","Toolbar","src","alt","CustomLayout","Layout","appBar","ProfilPagination","Pagination","rowsPerPageOptions","ProfilFilter","Filter","SearchInput","alwaysOn","defaultValue","ProfilEdit","style","Box","display","flexDirection","p","bgcolor","ProfilList","filters","rowClick","expand","StudiumEdit","StudiumList","App","Admin","i18nProvider","langProvider","layout","Resource","edit","EditGuesser","show","ShowGuesser","mySvg","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.749b96ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b89a229.svg\";","import {fetchUtils} from 'react-admin';\nimport postgrestRestProvider from \"@raphiniert/ra-data-postgrest\";\nrequire('dotenv').config();\n\nexport const API_URL = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_PROD_API_URL : process.env.REACT_APP_DEV_API_URL;\n\n\n/**\n *\n * dataProvider configurations\n *  Authorization Token for the API\n *\n * @param url\n * @param options\n * @returns {Promise<{status: number; headers: Headers; body: string; json: any}>}\n */\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({Accept: 'application/json'});\n    }\n    options.headers.set('Content-Type', `application/json`);\n    options.headers.set('Access-Control-Expose-Headers', `Content-Range`);\n    options.headers.set('Access-Control-Expose-Headers', `X-Total-Count`);\n    options.headers.set('X-Total-Count', `5000`);\n    options.headers.set('Prefer', `count=exact`);\n    options.headers.delete('Accept');\n    options.headers.set('Authorization', process.env.REACT_APP_API_KEY);\n    return fetchUtils.fetchJson(url, options);\n\n};\n\n\n/**\n * send the Authorization Token in header\n * @type {DataProvider}\n */\n\nconsole.log(\"-----------------------\");\nconsole.log(API_URL);\nconsole.log(\"-----------------------\");\n\nconst dataProvider = postgrestRestProvider(API_URL, httpClient);\n\nfunction buildAndQuery(prop, params) {\n    let querystring = \"\";\n    for (prop in params.filter) {\n        console.log(\"PROPERTY : \" + prop);\n        console.log(\"VALUE : \" + params.filter[prop]);\n        querystring = \"&\" + prop + \"=eq.\" + params.filter[prop];\n    }\n    return querystring;\n}\n\n/**\n *\n * Extending the Dataprovider Functionality to build OR Queries on the Api.\n * The function takes a list of params and their keys to query the specified table with an or.\n *\n * @type {{[p: string]: any, deleteMany: (resource: string, params: DeleteManyParams) => Promise<DeleteManyResult>, updateMany: (resource: string, params: UpdateManyParams) => Promise<UpdateManyResult>, getList: (resource: string, params: GetListParams) => Promise<GetListResult>, getMany: (resource: string, params: GetManyParams) => Promise<GetManyResult>, getManyReference: (resource: string, params: GetManyReferenceParams) => Promise<GetManyReferenceResult>, getOne: (resource: string, params: GetOneParams) => Promise<GetOneResult>, update: (resource: string, params: UpdateParams) => Promise<UpdateResult>, create: (resource: string, params: CreateParams) => Promise<CreateResult>, getManyOr: (function(*, *): Promise<{data: *}>), delete: (resource: string, params: DeleteParams) => Promise<DeleteResult>}}\n */\nconst myDataProvider = {\n    ...dataProvider,\n    /*getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `${API_URL}/${resource}?${JSON.stringify(query)}`;\n\n        return httpClient(url).then(({ headers, json }) => ({\n//            data: json,\n            data: json.map(resource => ({ ...resource, id: resource.addressid }) ),\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },*/\n\n\n\n    getList: function (resource, params) {\n        console.log(\"IN GET LIST\");\n        console.log(\"PARAMS : \" + JSON.stringify(params));\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        console.log(\"PER PAGE : \" + perPage);\n        console.log(\"FIELD : \" + field);\n        console.log(\"ORDER : \" + order);\n        console.log(\"PAGE : \" + page);\n        console.log(\"FILTER : \" + JSON.stringify(params.filter));\n        let limit = perPage;\n        let offset = (page - 1) * perPage;\n        let prop;\n\n\n        //let headers = {};\n        let options={};\n        options.headers = new Headers({'Prefer': 'count=exact'});\n        options.headers.set('Prefer', `count=exact`);\n        //let shit = httpClient(url, options).then(function (_ab) {\n        //            console.log(\"COUNT RESPONSE : \" + JSON.stringify(_ab));\n        //            return  _ab;\n        //});\n\n\n        let querystring = buildAndQuery(prop, params);\n        var responseheaders = {};\n\n        let url = API_URL + \"/\" + resource + \"?limit=\" + limit + \"&offset=\" + offset + querystring;\n        //let url = API_URL + \"/\" + resource;\n        console.log(\"URL : \" + url);\n        return httpClient(url, options).then((response) => {\n            responseheaders = response.headers;\n            let contentrange = [0,100];\n            for (var pair of response.headers.entries()) {\n                console.log(pair[0]+ ': '+ pair[1]);\n                if(pair[0]==='content-range'){\n                    contentrange = pair[1].split('/');\n                    console.log(\"PAIR : \" + pair[1]);\n                    console.log(\"RANGE AFTER SPLIT : \" + contentrange);\n                }\n            }\n            let jsondata = response.json;\n            //console.log(\"RESPONSE : \" + JSON.stringify(responseheaders));\n\n            //console.log(\"RESOURCE : \" + resource);\n\n            if(resource===\"student\"){\n                //FIXME Maybe we dont need the .replace\n                jsondata = JSON.parse(JSON.stringify(jsondata).replace(\"\\\"id\\\":\", \"\\\"addressid\\\":\")).map(resource => ({ ...resource, id: resource.addressid }));\n            }\n            console.log(\"JOSN : \" + JSON.stringify(jsondata));\n            //let totalamount = parseInt(headers.get('content-range').split('/').pop(), 10);\n            console.log(\"AMOUNT : \" + contentrange[1]);\n            var totalcount = parseInt(contentrange[1]);\n            return ({data: jsondata, total: totalcount});\n        })\n    },\n\n    getOne: function (resource, params) {\n      console.log(\"IN GET ONE\");\n\n      let url = API_URL + \"/\" + resource + \"?id=eq.\" + params.id;\n      if(resource===\"student\"){\n        url = API_URL + \"/\" + resource + \"?addressid=eq.\" + params.id;\n      }\n      console.log(\"IN GET ONE URL : \" + url);\n      return httpClient(url).then(function (_a) {\n          let json = _a.json;\n          console.log(\"RESOURCE GET ONE : \" + resource);\n          if(resource=== \"student\"){\n            json = JSON.parse(JSON.stringify(_a.json).replace(\"\\\"id\\\":\", \"\\\"addressid\\\":\")).map(resource => ({ ...resource, id: resource.addressid }));\n          }\n          console.log(\"JOSN GET ONE: \" + JSON.stringify(json));\n          return ({data: json});\n      });\n\n    },\n\n    getManyOr: function (resource, params) {\n        let prop;\n        let queryparam;\n        let queryValues = [];\n\n        for (prop in params) {\n            if (params.hasOwnProperty(prop)) {\n                let key = prop;\n                let valueArray = params[key];\n                for (queryparam in valueArray) {\n                    let queryString = key + \".eq.\" + valueArray[queryparam];\n                    queryValues.push(queryString);\n                }\n            }\n        }\n        let queryids = queryValues.join(\",\");\n        let queerystring = (!queryids) ? \"id=eq.-1\" : \"or=(\" + queryids + \")\";\n            if(resource===\"student\"){\n                queerystring = (!queryids) ? \"addressid=eq.-1\" : \"or=(\" + queryids + \")\";\n      }\n        let url = API_URL + \"/\" + resource + \"?\" + queerystring;\n        return httpClient(url).then(function (_a) {\n            var json = _a.json;\n            return ({data: json});\n        });\n    },\n};\n\nexport default myDataProvider\n","import dataProvider from '../api/dataProvider';\nimport React from 'react';\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const ApiService = (props) => {\n    const value = {};\n\n    return (\n        <ApiService.Provider value={value}>\n            {props.children}\n        </ApiService.Provider>\n    );\n};\n/**\n *\n *  get the right that belong to specified role\n *\n * @type {{deleteUserRole: myApiService.deleteUserRole, fetchRightObjectsFOrId: (function(*=): (*|Promise<unknown>)), fetchAllRights: (function(*, *): Promise<GetListResult>), createUserRole: myApiService.createUserRole, fetchRightIdsForRoles: (function(*=): (*|Promise<unknown>)), fetchAllRoleObjects: (function(): Promise<GetListResult>), fetchRoleListForUser: (function(string): Promise<GetListResult>)}}\n */\n\nconst myApiService = {\n    fetchRightIdsForRoles: function (roleIds) {\n        return dataProvider.getManyOr('role_right', {\n            id_role: roleIds\n        });\n    },\n\n    /**\n     *\n     * Insert//assign a relation of RoleRight.\n     *\n     * @param userRightIds\n     * @returns {*|Promise<unknown>}\n     */\n    fetchRightObjectsFOrId: function (userRightIds) {\n        return dataProvider.getManyOr('right', {\n            id: userRightIds\n        });\n    },\n\n    /**\n     * get all rights\n     *\n     * @param resource\n     * @param params\n     * @returns {Promise<GetListResult>}\n     */\n    fetchAllRights: function (resource, params) {\n        return dataProvider.getList('right', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'ASC'\n            },\n            filter: {},\n        });\n    },\n\n   /* fetchAllUserObjects: function () {\n        return dataProvider.getList('user', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'ASC'\n            },\n            filter: {},\n        })\n    },\n*/\n\n    /**\n     *\n     * getting all Roles\n     *\n     * @returns {Promise<GetListResult>}\n     */\n    fetchAllRoleObjects: function () {\n        return dataProvider.getList('role', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'ASC'\n            },\n            filter: {},\n        })\n    },\n\n    /**\n     *  Getting all Roles for a specified user.\n     *\n     * @param userId\n     * @returns {Promise<GetListResult>}\n     */\n    fetchRoleListForUser: function (userId) {\n        return dataProvider.getList('user_role', {\n            pagination: {\n                page: 1,\n                perPage: 50\n            },\n            sort: {\n                field: 'id',\n                order: 'ASC'\n            },\n            filter: {\n                id_user: userId\n            },\n        });\n    },\n\n    /**\n     * assign roles to User\n     *\n     * @param payload\n     */\n\n    createUserRole: function (payload) {\n        dataProvider\n            .create('user_role', {data: payload})\n            .then(response => {\n                // success side effects go here\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    },\n    /**\n     * remove roles from User\n     *\n     * @param userRoleId\n     */\n    deleteUserRole: function (userRoleId) {\n        dataProvider\n            .delete('user_role', {id: userRoleId})\n            .then(response => {\n                // success side effects go here\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n};\n\n\nexport default myApiService\n","\nimport { NotificationManager} from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\n\n/**\n *\n *  Display a Notification\n *  in te React App as Popup Dialog\n * @param type\n * @param title\n * @param message\n */\n\n\n\n export const createNotification = (type, title, message) => {\n    console.log(\"^^^^^^^^^^ CREATING NOTIFICATION TYPE ^^^^^^^^^^^^^^^^^^\");\n    console.log(type);\n        switch (type) {\n\n            case 'info':\n                console.log(\"^^^^^^^^^^ SHOW INFO ^^^^^^^^^^^^^^^^^^\");\n                NotificationManager.info(message, title, 1000);\n\n                break;\n            case \"success\":\n                console.log(\"^^^^^^^^^^ SHOW SUCCESS ^^^^^^^^^^^^^^^^^^\");\n                NotificationManager.success(message, title, 1000);\n                break;\n            case 'warning':\n                console.log(\"^^^^^^^^^^ CSOW WARING ^^^^^^^^^^^^^^^^^^\");\n                NotificationManager.warning(message, title, 1000);\n                break;\n            case 'error':\n                NotificationManager.error(message, title, 1000);\n                break;\n        }\n};\n\n\n","import React from 'react';\nimport DualListBox from 'react-dual-listbox';\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\nimport dataProvider from '../api/dataProvider';\nimport apiService from '../api/apiService';\nimport {createNotification} from './Notification';\nimport {NotificationContainer} from \"react-notifications\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n/**\n * component for creating role-right-list\n *\n * @component\n *\n */\nexport class RightListBox extends React.Component {\n    /**\n     * Construct right list box\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            allRightsrow: [],\n            allRights: [],\n            roleRights: [],\n            deletedRights: [],\n            selected: [1],\n            initialRights: [],\n            relationobjects: []\n        };\n        this.handleClick = this.updateRights.bind(this);\n        //this.props.hurensohn = \"was\";\n    }\n\n    /**\n     *\n     * invoke JUST ONCE onload or reload\n     *\n     * @function\n     *\n     */\n    componentDidMount() {\n        this.setAllRightsToState();\n        this.getroleRightsToState();\n\n    }\n\n    /**\n     *\n     * send HTTP request to get Role Rights\n     * save roleRights to the state\n     *\n     *@function\n     *\n     */\n    getroleRightsToState() {\n        console.log(\"------- Set Role Rights ----------------\")\n        let roleRights = [];\n        let relations = [];\n        this.fetchRightIdsForRole().then(response => response)\n            .then(response => {\n                response.data.map(function (val) {\n                    roleRights.push(val.id_right);\n                    relations.push(val);\n                });\n                console.log(roleRights);\n                this.setState({\n                    selected: roleRights,\n                    initialRights: roleRights,\n                    relationobjects: relations\n                })\n            }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    /**\n     * function for getting the Right for a specified Role\n     *\n     * @returns {*}\n     * @function\n     */\n    fetchRightIdsForRole() {\n        return dataProvider.getList('role_right', {\n            pagination: {\n                page: 1,\n                perPage: 50\n            },\n            sort: {\n                field: 'id',\n                order: 'ASC'\n            },\n            filter: {\n                id_role: this.props.record.id\n            },\n        });\n    }\n\n\n    /**\n     *\n     *  send HTTP request to get All Rights\n     *  save AllRights to the state\n     *\n     *  @function\n     */\n    setAllRightsToState() {\n        console.log(\"------- Set All Rights ----------------\")\n        apiService.fetchAllRights().then(response => response)\n            .then(response => {\n                //  console.log(JSON.stringify(response.data));\n                this.setState({\n                    allRightsraw: response.data,\n                    allRights: JSON.stringify(response.data)\n                })\n            }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    /**\n     *\n     * function for editing role-right-box\n     * add a new right to a role\n     * remove a right from a role\n     *\n     * @param e\n     * @function\n     */\n    updateRights(e) {\n\n        e.preventDefault();\n        function createRoleRight(payload) {\n            dataProvider\n                .create('role_right', {data: payload})\n                .then(response => {\n                    // success side effects go here\n                    console.log(response);\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        }\n\n\n        function deleteRoleRight(relationId) {\n\n            dataProvider\n                .delete('role_right', {id: relationId})\n                .then(response => {\n                    // success side effects go here\n                    console.log(response);\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        }\n        if (this) {\n            console.log(\"------- Now we aggregating ----------------\");\n            console.log(this.props);\n\n            let initials = this.state.initialRights;\n            let selected = this.state.selected;\n            let currentRoleId = this.props.record.id;\n            let realtions = this.state.relationobjects;\n\n            var tocreate = [];\n            var todelete = [];\n\n            this.state.allRightsraw.map(function (val) {\n\n                console.log(\"------- VALUE  ----------------\");\n                console.log(val.id);\n                let rightId = val.id;\n                if (initials.includes(rightId) && !selected.includes(rightId)) {\n                    console.log(\"------- Deleting .....  ----------------\");\n\n                    console.log(\"--------- REALTIONS -----------------\");\n\n                    let idToDelete = realtions.map(function (val) {\n                        console.log(JSON.stringify(val));\n                        let definedrelation = JSON.parse(JSON.stringify(val));\n                        // eslint-disable-next-line eqeqeq\n                        if (definedrelation.id_role == currentRoleId && definedrelation.id_right == rightId) {\n                            //console.log(\"ID : \" + definedrelation.id);\n                            //console.log(rightId);\n                            confirmAlert({\n                                title: 'Confirm to submit',\n                                message: 'Are you sure, you want to delete Right from Role.',\n                                buttons: [\n                                    {\n                                        label: 'Yes',\n                                        onClick: () => {\n                                            todelete.push(rightId);\n                                            deleteRoleRight(definedrelation.id);\n                                            createNotification(\"warning\", \"Right deleted\", \"Right for Role deleted\");\n                                            return definedrelation.id;\n                                        }\n                                    },\n                                    {\n                                        label: 'No',\n                                        onClick: () => console.log(\"-----NO-----\")\n                                    }\n                                ]\n                            });\n                        }\n                    });\n\n                } else if (!initials.includes(rightId) && selected.includes(rightId)) {\n                    console.log(\"------- Creating .....  ----------------\");\n\n                    tocreate.push(rightId);\n                    //only possible to post one entry\n                    let payload = JSON.stringify({id_right: rightId, id_role: currentRoleId});\n                    console.log(payload);\n                    createRoleRight({\"id_right\": rightId, \"id_role\": currentRoleId});\n                    createNotification(\"success\", \"Right saved\", \"Right for Role persisted\");\n                }\n            });\n\n\n        }\n    }\n\n\n    /**\n     * invoke whenever there is a change\n     *\n     * @param selected\n     * @function\n     */\n    onChange = (selected) => {\n        this.setState({\n            selected\n        });\n    };\n\n    /**\n     *\n     * Rendering Role Right box\n     *\n     * @returns {*}\n     */\n    render() {\n        if (this.state.allRights.length && this.state.allRights.length != 0) {\n            var rig = JSON.parse(this.state.allRights.replace(/id/g, \"value\").replace(/name/g, \"label\"));\n            rig.map(function (val) {\n\n                delete val.created_at;\n                delete val.updated_at;\n            });\n\n            return (<div><DualListBox options={rig} selected={this.state.selected} onChange={this.onChange}/>\n                <button className=\"sabu\" onClick={this.updateRights.bind(this)}>Save rights\n                </button>\n                <NotificationContainer/>\n            </div>);\n\n        }\n        return (<div><DualListBox options={this.state.selected} selected={this.state.selected}/></div>);\n    }\n}\n\nexport default RightListBox;\n","import React,{ Fragment }  from 'react';\nimport {ChipField, Create, Datagrid, NumberInput, Edit, EditButton, List, ReferenceField, ReferenceManyField, SimpleForm, SingleFieldList, TextField, TextInput} from 'react-admin';\nimport {RightListBox} from \"./comp/rightlistbox\";\n\n// in src/posts.js\n\n/**\n *\n * creating a new role.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const RoleCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n\n        </SimpleForm>\n    </Create>\n\n);\n\n\n/**\n *\n * showing list of the role.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const RoleList = (props) => (\n    <Fragment>\n        <List {...props}>\n\n            <Datagrid>\n                <TextField source=\"id\" />\n                <TextField source=\"name\" />\n                <ReferenceManyField label=\"Right\" reference=\"role_right\" target=\"id_role\">\n                    <SingleFieldList linkType={false}>\n                        <ReferenceField source=\"id_right\" reference=\"right\">\n                            <ChipField source=\"name\" />\n                        </ReferenceField>\n                    </SingleFieldList>\n                </ReferenceManyField>\n                <EditButton />\n            </Datagrid>\n        </List>\n    </Fragment>\n);\n\n/**\n *\n * editing a specified role.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const RoleEdit = props => (\n    <Edit {...props}>\n        <SimpleForm >\n            <TextInput source=\"name\" />\n            <RightListBox id_role={props.id}/>\n        </SimpleForm>\n    </Edit>\n\n);\n\n\n\n","import React, { Component, Children, cloneElement, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport shouldUpdate from 'recompose/shouldUpdate';\nimport { withRouter } from 'react-router-dom';\nimport compose from 'recompose/compose';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link, linkToRecord } from 'react-admin';\n\n/**\n * style\n *\n * @type {{link: {cursor: string, \"& *\": {cursor: string}}}}\n */\nconst styles = {\n    link: {\n        cursor: 'pointer',\n        '& *': {\n            cursor: 'pointer',\n        },\n    },\n};\n/**\n *\n * @param link\n * @param rest\n * @returns {*}\n */\nconst sanitizeRestClasses = ({ link, ...rest }) => rest;\n\n/**\n *\n * @param classes\n * @param to\n * @param relative\n * @param disabled\n * @param history\n * @param location\n * @param match\n * @param staticContext\n * @param rest\n * @returns {*}\n */\nconst sanitizeRestProps = ({\n                               classes,\n                               to,\n                               relative,\n                               disabled,\n                               history,\n                               location,\n                               match,\n                               staticContext,\n                               ...rest\n                           }) => rest;\n\n\nclass LinkAnyFieldButton extends Component {\n    static propTypes = {\n        // passed by parent\n        basepath: PropTypes.string,\n        children: PropTypes.any,\n        record: PropTypes.object,\n        classes: PropTypes.object,\n        // own props\n        to: PropTypes.string,\n        relative: PropTypes.bool,\n        disabled: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n        // withRouter props\n        match: PropTypes.object,\n    };\n    static defaultProps = {\n        to: 'show',\n    };\n\n    render() {\n        const {\n            basepath = '',\n            children,\n            record = {},\n            classes,\n            to,\n            relative,\n            disabled,\n            match,\n        } = this.props;\n\n        const recordLink = to.startsWith('/')\n            ? to.replace(/\\/:([\\w-]+)/g, (m, param) => {\n                return `/${record[param]}`;\n            })\n            : linkToRecord(basepath, record.id, to);\n        const completeTo = relative ? `${match.url}${recordLink}` : recordLink;\n        const rest = sanitizeRestProps(this.props);\n        const restClasses = sanitizeRestClasses(classes);\n        const isDisabled =\n            typeof disabled === 'function' ? disabled(record) : disabled;\n\n        const countChildren = Children.count(children);\n\n        const childElements =\n            countChildren === 1\n                ? cloneElement(children, {\n                    record,\n                    basepath,\n                    classes: restClasses,\n                })\n                : Children.map(children, field =>\n                    cloneElement(field, {\n                        record,\n                        basepath,\n                        classes: restClasses,\n                        ...rest,\n                    })\n                );\n\n        return isDisabled ? (\n            <Fragment>{childElements}</Fragment>\n        ) : (\n            <Link to={`${completeTo}`} className={classes.link}>\n                {childElements}\n            </Link>\n        );\n    }\n}\n\n/**\n *\n *  add props: history, location, match, staticContext\n *  add style\n *\n *  @param props\n *  @param nextProps\n *\n */\nconst enhance = compose(\n    withRouter, // adds props: history, location, match, staticContext\n    withStyles(styles),\n    shouldUpdate(\n        (props, nextProps) =>\n            props.translate !== nextProps.translate ||\n            (props.record &&\n                nextProps.record &&\n                props.record.id !== nextProps.record.id) ||\n            props.basePath !== nextProps.basePath ||\n            (props.record == null && nextProps.record != null)\n    )\n);\n\nexport default enhance(LinkAnyFieldButton);\n","import React from 'react';\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\nimport Chip from '@material-ui/core/Chip';\nimport LinkAnyFieldButton from \"./linkAnyFieldButton\";\nimport apiService from '../api/apiService';\n\nfunction updateState(text) {\n    this.setState({text})\n}\n\n\n/**\n *\n * Component for showing  RIGHTS in  user role box\n * be shown in user.js\n *\n * @component\n *\n */\nexport class UserRightBox extends React.Component {\n\n    /**\n     *\n     * CONSTRUCT USER-RIGHT BOX\n     *\n     * @param props\n     * @constructor\n     *\n     */\n    constructor(props) {\n        super(props);\n        //  console.log(\"*** CONSTRUCT USER RIGHT BOX ***\");\n        // Don't call this.setState() here!\n        this.state = {\n            userroles: [],\n            roleRights: [],\n            rightObjects: []\n        };\n        this.setRightOfUser = this.setRightOfUser.bind(this);\n        updateState = updateState.bind(this)\n    }\n\n    updateState() {\n        this.setState({shown: false});\n    }\n\n    /**\n     *\n     *invoke WHENEVER THERE IS AN UPDATE IN USER-RIGHT BOX\n     *\n     * @param prevProps\n     * @param prevState\n     */\n    componentDidUpdate(prevProps, prevState) {\n\n        if (JSON.stringify(prevProps.selected) !== JSON.stringify(this.props.selected)) {\n            this.setRightOfUser();\n        }\n\n    }\n\n    /**\n     *\n     *  invoke JUST ONCE onload or reload\n     *\n     *  @function\n     *\n     */\n    componentDidMount() {\n        this.setRightOfUser();\n    }\n\n    /**\n     *\n     * invoke whenever the component receives new props.\n     *\n     * @param props\n     * @param state\n     * @returns {null|{cachedSomeProp: *}}\n     */\n    static getDerivedStateFromProps(props, state) {\n\n\n        return null;\n        return {\n            cachedSomeProp: props,\n            // ... other derived state properties\n        };\n    }\n\n\n    /**\n     *   SET RIGHT TO USER\n     *\n     * send HTTP request to get User Roles\n     * save UserRoles to the state\n     *\n     * @function\n     *\n     */\n    setRightOfUser() {\n        var self = this;\n        let currentselected = this.props.selected;\n        if (this) {\n            apiService.fetchRightIdsForRoles(currentselected).then(function (roleRightResponse) {\n                let roleRights = roleRightResponse == [] ? [] : roleRightResponse.data;\n                self.setState({\n                    roleRights: roleRights\n                });\n\n                return roleRights; // pass the data as promise to next then block\n            }).then(function (userRightResponse) {\n                let roleRightIds = [];\n                userRightResponse.map((value, index) => {\n                    roleRightIds.push(value.id_right);\n                });\n                /** SETTING THE NEW RIGHTS IN STATE **/\n                apiService.fetchRightObjectsFOrId(roleRightIds).then(function (rightResponse) {\n\n                    let rightObjects = rightResponse == [] ? rightResponse : rightResponse.data;\n                    self.setState({\n                        rightObjects: rightObjects\n                    })\n                })\n            }).catch(err => {\n                console.log(err);\n            });\n        }\n    }\n\n    /**\n     * RENDERING USER RIGHT BOX\n     *\n     * @returns {null|*}\n     */\n    render() {\n\n        if (this) {\n            const rights = this.state.rightObjects;\n            return (\n                <div className=\"diusri\" >\n                    <ul>\n                        {rights.map((value, index) => {\n                            let url = \"/right/\" + value.id;\n\n                            return <LinkAnyFieldButton to={url} key={value.id}>\n                                <Chip label={value.name}></Chip>\n                            </LinkAnyFieldButton>\n                        })\n                        }\n                    </ul>\n                </div>\n            )\n        }\n        return null;\n    }\n}\n\nexport default UserRightBox;\n","import React from 'react';\nimport DualListBox from 'react-dual-listbox';\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\nimport {UserRightBox} from \"./userrightlistbox\";\nimport apiService from '../api/apiService';\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {NotificationContainer} from 'react-notifications';\nimport {createNotification} from './Notification';\nimport 'font-awesome/css/font-awesome.css'\nimport 'react-notifications/lib/notifications.css';\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\n\n\n/**\n * style\n *\n * @type {((props?: any) => ClassNameMap<string>) | *}\n */\nconst useStyles = makeStyles((theme) => ({\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n    root: {\n        //flexGrow: 1,\n    }, heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\n/**\n * standard value for user role box\n *\n * @type {*[]}\n */\nconst options = [{\n    value: 'one',\n    label: 'Option One'\n},\n    {\n        value: 'two',\n        label: 'Option Two'\n    },\n];\n\n/**\n *\n * Component for setting user-role-box\n * be shown in user.js\n *\n * @component\n *\n */\nexport class RoleListBox extends React.Component {\n\n    state = {\n        selected: ['1', '2']\n    };\n\n    /**\n     *  CONSTRUCT user-role-box\n     *\n     * @param props\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        console.log(\"*** CONSTRUCT ROLE LIST BOX ***\");\n        console.log(props);\n        let id_user = props.id_user;\n        console.log(id_user);\n\n\n        this.state = {\n            allrolesrow: [],\n            allroles: [],\n            userroles: [],\n            deletedroles: [],\n            selected: [1],\n            initialroles: [],\n            relationobjects: []\n        };\n\n    }\n\n    /**\n     *\n     * invoke JUST ONCE onload or reload\n     *\n     * @function\n     *\n     */\n    componentDidMount() {\n        console.log(\"*** ROLE LIST BOX DID MOUNT ***\");\n        this.setAllRolesToState();\n        this.getUserRolesToState();\n\n    }\n\n    /**\n     *\n     * send HTTP request to get User Roles\n     * save UserRoles to the state\n     *\n     * @function\n     */\n    getUserRolesToState() {\n        let userroles = [];\n        let relations = [];\n        console.log(this.props)\n        apiService.fetchRoleListForUser(this.props.id_user).then(response => response)\n            .then(response => {\n                response.data.map(function (val) {\n                    userroles.push(val.id_role);\n                    relations.push(val);\n                });\n                this.setState({\n                    selected: userroles,\n                    initialroles: userroles,\n                    relationobjects: relations\n                })\n            }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    /**\n     *\n     * send HTTP request to get All Roles\n     * save AllRoles to the state\n     *\n     * @function\n     */\n    setAllRolesToState() {\n        apiService.fetchAllRoleObjects().then(response => {\n            this.setState({\n                allrolesraw: response.data,\n                allroles: JSON.stringify(response.data)\n            })\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    /**\n     *\n     * function for editing user-role-box\n     * create a new role to user\n     * remove a role from user\n     *\n     * @param event\n     * @function\n     */\n    updateRoles(event) {\n        event.preventDefault();\n        if (this) {\n            let initials = this.state.initialroles;\n            let selected = this.state.selected;\n            let currentUserId = this.props.id_user;\n            let realtions = this.state.relationobjects;\n            let toCreate = [];\n            let toDelete = [];\n\n\n            this.state.allrolesraw.map(function (val) {\n\n                console.log(\"------- VALUE  ----------------\");\n              //  console.log(val.id);\n                let roleId = val.id;\n                if (initials.includes(roleId) && !selected.includes(roleId)) {\n                    let idToDelete = realtions.map(function (val) {\n                        //console.log(JSON.stringify(val));\n                        let definedRelation = JSON.parse(JSON.stringify(val));\n                        if (definedRelation.id_user == currentUserId && definedRelation.id_role == roleId) {\n\n                            confirmAlert({\n                                title: 'Confirm to submit',\n                                message: 'Are you sure you want to delete Role from User.',\n                                buttons: [\n                                    {\n                                        label: 'Yes',\n                                        onClick: () => {\n                                            toDelete.push(roleId);\n                                            console.log(\"------- to delete  ----------------\");\n                                            console.log(definedRelation.id);\n                                            apiService.deleteUserRole(definedRelation.id);\n                                            createNotification(\"warning\", \"Role deleted\", \"Role for User deleted\");\n                                            return definedRelation.id;\n                                        }\n                                    },\n                                    {\n                                        label: 'No',\n                                        onClick: () => console.log(\"-----NO-----\")\n                                    }\n                                ]\n                            });\n                        }\n                    });\n\n                } else if (!initials.includes(roleId) && selected.includes(roleId)) {\n                    toCreate.push(roleId);\n                    //only possible to post one entry\n                    apiService.createUserRole({\"id_role\": roleId, \"id_user\": currentUserId});\n                    createNotification(\"success\", \"Role saved\", \"Role for User persisted\");\n                }\n            });\n        }\n    }\n\n\n    /**\n     * invoke whenever there is a change\n     *\n     * @param selected\n     * @function\n     */\n    onChange = (selected) => {\n        //alert(selected)\n        this.setState({\n            selected: selected,\n            userroles: selected\n        });\n        //UserRightBox.getDerivedStateFromProps()\n    };\n\n    /**\n     *\n     * @param text\n     * @function\n     */\n    changingRightsChild(text) {\n    }\n\n\n\n\n    /**\n     * rendering role list box\n     * @returns {*}\n     */\n    render() {\n        if (this.state.allroles && this.state.allroles.length > 0) {\n            const parsedJsonObject = JSON.parse(this.state.allroles.replace(/id/g, \"value\").replace(/name/g, \"label\"));\n\n            return (<div >\n                <DualListBox showHeaderLabels=\"true\" options={parsedJsonObject} selected={this.state.selected}\n                             onChange={this.onChange}/>\n\n                <NotificationContainer/>\n                <ExpansionPanel defaultExpanded={true}>\n                    <Typography className={useStyles.heading}>Rights of User</Typography>\n                    <ExpansionPanelDetails >\n                        <UserRightBox selected={this.state.selected} userid={this.props.id_user} k />\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n                <button\n                    className=\"sabu\"\n                    onChange={(e) => this.changingRightsChild(e.target.value)}\n                    onClick={(event) => this.updateRoles(event)}><i className=\"fa fa-save\"></i>\n                    Save\n                </button>\n            </div>);\n\n        }\n        return (<div  ><DualListBox  options={options} selected={this.state.selected}\n                                  icons={{\n                                      moveLeft: <span className=\"fa fa-chevron-left\"/>,\n                                      moveAllLeft: [\n                                          <span key={0} className=\"fa fa-chevron-left\"/>,\n                                          <span key={1} className=\"fa fa-chevron-left\"/>,\n                                      ],\n                                      moveRight: <span className=\"fa fa-chevron-right\"/>,\n                                      moveAllRight: [\n                                          <span key={0} className=\"fa fa-chevron-right\"/>,\n                                          <span key={1} className=\"fa fa-chevron-right\"/>,\n                                      ],\n                                      moveDown: <span className=\"fa fa-chevron-down\"/>,\n                                      moveUp: <span className=\"fa fa-chevron-up\"/>,\n                                  }}\n\n\n                                   /></div>);\n    }\n}\n\nexport default RoleListBox;\n","import React from 'react';\nimport {FC} from 'react';\nimport classnames from 'classnames';\nimport Chip from '@material-ui/core/Chip';\nimport LinkAnyFieldButton from \"./linkAnyFieldButton\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {Link, useTranslate, useQueryWithStore, ReferenceField, Datagrid} from 'react-admin';\nimport {makeStyles} from '@material-ui/core/styles';\nimport apiService from \"../api/apiService\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport dataProvider from '../api/dataProvider';\nimport {useShowController} from 'react-admin';\nimport axios from 'axios';\nimport {API_URL} from '../api/dataProvider'\nimport {DataManager, Query} from \"@syncfusion/ej2-data\";\nimport {element} from \"prop-types\";\nimport UserShow from \"../usershow3\";\n\n\nvar exmatreason = null;\nvar degreecode = null;\nvar degree = null;\nvar university = null;\nvar capr_nameeng = null;\nvar capr_degreeshort = null;\nvar isnotifiable = null;\nvar immatdate = null;\nvar exmatdate = null;\nvar rwte_name_data = null;\nvar rwte_name = null;\nvar term_type_data = null;\nvar term_type = null;\nvar i = null;\nvar j = null;\nvar k = null;\n\n\n\nexport class Tbl extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let aid = props.addressid;\n        console.log(\"addressid  \" + aid)\n        this.state = {\n            sdata: []\n\n        };\n\n        axios.get(API_URL + '/studie?addressid=eq.' + aid)\n            .then(res => {\n\n                const sdata = res.data;\n                this.setState({sdata: res.data});\n                console.log(\"studie data\")\n                console.log(sdata)\n\n\n     exmatreason = sdata.map(function (sdata) {\n         return <li>{sdata.exmatreason}</li>\n     });\n     degreecode = sdata.map(function (sdata) {\n         return <li>{sdata.degreecode}</li>\n     });\n     degree = sdata.map(function (sdata) {\n         return <li>{sdata.degree}</li>\n     });\n     university = sdata.map(function (sdata) {\n         return <li>{sdata.university}</li>\n     });\n     capr_nameeng = sdata.map(function (sdata) {\n         return <li>{sdata.capr_nameeng}</li>\n     });\n     capr_degreeshort = sdata.map(function (sdata) {\n         return sdata.capr_degreeshort\n     });\n     isnotifiable = sdata.map(function (sdata) {\n         return <li>{sdata.isnotifiable}</li>\n     });\n     exmatreason = sdata.map(function (sdata) {\n         return <li> {sdata.exmatreason}</li>\n     });\n     exmatreason = sdata.map(function (sdata) {\n         return <li> {sdata.exmatreason} </li>\n     });\n     immatdate = sdata.map(function (sdata) {\n         return <li> {sdata.immatdate}</li>\n     });\n\n     exmatdate = sdata.map(function (sdata) {\n         return <li> {sdata.exmatdate} </li>\n     });\n\n            });\n\n      /*\n       // get the Data from csph\n\n       axios.get(API_URL + '/studie?select=csph(csph_rwte_name,csph_type)&addressid=eq.' + aid)\n            .then(response => {\n\n                const cdata = response.data;\n                this.setState({cdata: response.data});\n                console.log(\"csph data\")\n                console.log(cdata)\n                rwte_name_data = cdata.map(function (cdata) {\n                    return cdata.csph\n                });\n                term_type_data = cdata.map(function (cdata) {\n                    return cdata.csph\n                });\n                for (i = 0; i < rwte_name_data.length; i++) {\n                    for (j = 0; j < rwte_name_data[i].length; j++) {\n\n                        rwte_name = rwte_name_data[i][j].csph_rwte_name\n\n                        term_type = term_type_data[i][j].csph_type\n                        console.log(\"**********************\")\n                        console.log(\"term_type  \" + [i]+ \" \"+[j])\n                        console.log(term_type)\n                        console.log(rwte_name)\n                    }\n                }\n\n\n            });*/\n\n    };\n\n\n    render() {\n        return (\n\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            degreecode\n                        </TableCell>\n                        <TableCell>\n                            degree\n                        </TableCell>\n                        <TableCell>\n                            university\n                        </TableCell>\n                        <TableCell>\n                            immatdate\n                        </TableCell>\n                        <TableCell>\n                            exmatdate\n                        </TableCell>\n                        <TableCell>\n                            exmatreason\n                        </TableCell>\n                        <TableCell>\n                            capr_nameeng\n                        </TableCell>\n                        <TableCell>\n                            capr_degreeshort\n                        </TableCell>\n                        <TableCell >\n                            isnotifiable\n                        </TableCell>\n\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n\n                        <TableCell>\n                            {degreecode}\n                        </TableCell>\n                        <TableCell>\n                            {degree}\n                        </TableCell>\n                        <TableCell>\n                            {university}\n                        </TableCell>\n                        <TableCell>\n                            {immatdate}\n                        </TableCell>\n                        <TableCell>\n                            {exmatdate}\n                        </TableCell>\n                        <TableCell>\n                            {exmatreason}\n                        </TableCell>\n                        <TableCell>\n                            {capr_nameeng}\n                        </TableCell>\n                        <TableCell>\n                            {capr_degreeshort}\n                        </TableCell>\n                        <TableCell>\n                            {isnotifiable}\n                        </TableCell>\n\n                    </TableRow>\n                </TableBody>\n            </Table>\n\n\n        )\n    }\n}\n\n\n\n\n\n\n\n","import * as React from 'react';\nimport {FC} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {ReferenceField, useShowController, Datagrid, TextField,List,  ReferenceManyField,\n    SingleFieldList,\n    ChipField,} from 'react-admin';\nimport Paper from '@material-ui/core/Paper';\nimport {Tbl} from \"./comp/table\";\n\n\nconst useStyles = makeStyles({\n    container: {minWidth: '35em', marginLeft: '1em'},\n    rightAlignedCell: {textAlign: 'right'},\n    boldCell: {fontWeight: 'bold'},\n    root: {width: 1400 , margin: '10px', },\n    spacer: {height: 20},\n});\n\n\nconst UserShow = (props) => {\n    const {record} = useShowController(props);\n    const classes = useStyles();\n\n    if (!record) return null;\n    return (\n        <Card className={classes.root}>\n            <CardContent className='userinfo'>\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <Typography variant=\"h6\" gutterBottom>\n                            User Information\n                        </Typography>\n                    </Grid>\n\n                </Grid>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} container alignContent=\"flex-end\">\n                        <ReferenceField\n                            reference=\"student\"\n                            source=\"student\"\n                            basePath=\"/student\"\n                            record={record}\n                            link={false}\n                        >\n                            <Typography className='userdata'>\n                                 {record.addressid}\n                                <br/>\n                                {record.anrede}\n                                <br/>\n                                {record.surname} {record.givenname}\n                                <br/>\n\n                            </Typography>\n\n                        </ReferenceField>\n                    </Grid>\n                </Grid>\n<Paper>\n<Tbl addressid={props.id}/>\n</Paper>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default UserShow;\n\n\n/*\n\n * <div className='info'>\n <Typography >\n termconfiguration  {record.termconfiguration}\n <br/>\n degreecode {record.degreecode}\n <br/>\n degree {record.degree}\n <br/>\n university {record.university}\n <br/>\n capr_nameeng {record.capr_nameeng}\n <br/>\n capr_degreeshort {record.capr_degreeshort}\n <br/>\n isnotifiable {record.isnotifiable}\n <br/>\n rwte_name  {record.rwte_name}\n <br/>\n term_type {record.term_type}\n <br/>\n </Typography>\n\n\n </div>\n */\n\n","\nimport React,{ Fragment }  from 'react';\nimport { Pagination} from 'react-admin';\n\nimport {\n    ChipField,\n    Create,\n    Datagrid,\n    Edit,\n    EditButton,\n    EmailField,\n    List,\n    ReferenceField,\n    ReferenceManyField,\n    SimpleForm,\n    SingleFieldList,\n    TextField,\n    TextInput,\n    Show,\n    SimpleShowLayout,\n    BooleanField,\n    BooleanInput,\n    Filter\n} from 'react-admin';\nimport {RoleListBox} from './comp/rolelistbox';\nimport './comp/comp.css'\nimport Box from \"@material-ui/core/Box\";\nimport Grid from '@material-ui/core/Grid';\nimport { useTranslate } from 'react-admin';\nimport UserShow from \"./usershow3.js\";\n\nconst ProfilPagination = props => <Pagination rowsPerPageOptions={[10, 25, 50, 100]} {...props} />;\n\nrequire('react-dom');\nwindow.React2 = require('react');\nconsole.log(\"-----compare------\")\nconsole.log(window.React1 === window.React2);\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nconst User_allFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"surname\" alwaysOn />\n        <TextInput label=\"Surname\" source=\"surname\" defaultValue=\"Surname\" />\n        <TextInput label=\"Givenname\" source=\"givenname\" defaultValue=\"Givenname\" />\n        <TextInput label=\"AddressID\" source=\"addressid\" />\n        <TextInput label=\"Termconfiguration\" source=\"termconfiguration\" defaultValue=\"Termconfiguration\" />\n    </Filter>\n);\n/**\n *\n * editing specified user.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const User_allEdit = (props) => (\n\n    <Edit  {...props}>\n        <SimpleForm >\n            <div style={{width: '100%'}} >\n                <Box display=\"flex\" flexDirection=\"row\" p={1} m={1} bgcolor=\"background.paper\" >\n                    <Box width=\"40%\" bgcolor=\"white.300\">\n                        <TextInput disabled source=\"id\"/>\n                        <TextField disabled source=\"surname\"  />\n                        <TextField source=\"givenname\"/>\n                        <TextField source=\"termconfiguration\"/>\n                    </Box>\n                    <Box width=\"60%\" bgcolor=\"white.300\">\n                        <RoleListBox id_user={props.id}/>\n                    </Box>\n                </Box>\n\n            </div>\n\n        </SimpleForm>\n    </Edit>\n);\n\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const User_allList = (props) => (\n\n    <Fragment>\n        <List {...props} pagination={<ProfilPagination />} filters={<User_allFilter />}>\n            <Datagrid rowClick=\"expand\" expand={<UserShow />}>\n                <TextField label=\"AddressId\" source=\"id\"/>\n                <TextField source=\"anrede\"/>\n                <TextField source=\"surname\"/>\n                <TextField source=\"givenname\"/>\n                <TextField source=\"termconfiguration\"/>\n                <ReferenceManyField label='Roles' reference=\"user_role\" target=\"id_user\">\n                    <SingleFieldList linkType={false}>\n                        <ReferenceField source=\"id_role\" reference=\"role\">\n                            <ChipField source=\"name\"/>\n                        </ReferenceField>\n                    </SingleFieldList>\n                </ReferenceManyField>\n                <EditButton/>\n            </Datagrid>\n        </List>\n    </Fragment>\n\n);\n","import React, {Fragment} from 'react';\nimport {Create, Edit, SimpleForm, TextInput, List, Datagrid, TextField, EditButton,} from 'react-admin';\nimport {Button, Drawer} from \"@material-ui/core\";\n\n\n/**\n *\n * creating a new right\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const  RightCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n        </SimpleForm>\n    </Create>\n);\n\n\n/**\n *\n * editing a specified right.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const RightEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n        </SimpleForm>\n    </Edit>\n);\n\n/**\n *\n * showing list of the right.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const RightList = (props) => (\n    <React.Fragment>\n        <List {...props}>\n            <Datagrid>\n                <TextField source=\"id\" />\n                <TextField source=\"name\" />\n                <EditButton />\n            </Datagrid>\n        </List>\n    </React.Fragment>\n);\n","import englishMessages from 'ra-language-english';\n\nexport  default  {\n    simple: {\n        action: {\n            close: 'Close',\n        },\n    },\n    ...englishMessages,\n    resources: {\n        user: {\n\n            name: 'User |||| Users',\n            fields: {\n                id: 'ID',\n                name: 'Name',\n                email: 'Email',\n                created_at: 'Created at',\n                updated_at: 'Updated at',\n                notifications: 'Notifications recipients',\n                first_name: 'First Name',\n                last_name: 'Last Name',\n                date_of_birth: 'Date of Birth',\n                city: 'City',\n            },\n        },\n        role: {\n\n            name: 'Role |||| Roles',\n            fields: {\n                id: 'ID',\n                name: 'Role',\n                created_at: 'Created at',\n                updated_at: 'Updated at',\n                priority: 'Priority',\n                category: 'Category',\n            },\n        },\n        user_role: {\n            name: 'User` Role |||| User`s Roles',\n            fields: {\n                id: 'ID',\n                id_user: 'User ID',\n                id_role: 'Role ID',\n                created_at: 'Created at',\n                updated_at: 'Updated at',\n            },\n        },\n        right: {\n            name: 'Right |||| Rights',\n            fields: {\n                id: 'ID',\n                name: 'Right',\n                creatred_at: 'Created at',\n                updated_at: 'Updated at',\n            },\n        },\n        role_right: {\n            name: 'Role`s Right |||| Role`s Rights',\n            fields: {\n                id: 'ID',\n                id_role: 'Role ID',\n                id_right: ' Right ID',\n                created_at: 'Created at',\n                updated_at: 'Updated at',\n            },\n        },\n    },\n};\n\n\n","import polyglotI18nProvider from 'ra-i18n-polyglot';\nimport englishMessages from './en';\n\nconst messages = {\n    de: () => import('./de.js').then(messages => messages.default),\n};\n\nexport default polyglotI18nProvider(locale => {\n    if (locale === 'de') {\n        return messages[locale]();\n    }\n\n    // Always fallback on english\n    return englishMessages;\n}, 'en');\n","import React from 'react';\nimport {AppBar} from 'react-admin';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport {makeStyles} from '@material-ui/core/styles';\n\nimport logo from './logo.svg';\n\nconst useStyles = makeStyles({\n    title: {\n        flex: 1,\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n    },\n    spacer: {\n        flex: 1,\n    },\n    logo: {\n        width: '80px',\n    },\n});\nconst MyAppBar = props => {\n    const classes = useStyles();\n    return (\n        <AppBar {...props} color='secondary'>\n            <Toolbar>\n                <img src={logo} alt=\"logo\" className={classes.logo}/>\n            </Toolbar>\n\n            <Typography\n                variant=\"h6\"\n                color=\"inherit\"\n                className={classes.title}\n            />\n        </AppBar>\n    );\n};\n\nexport default MyAppBar\n","import React from 'react';\nimport { Layout } from 'react-admin';\nimport MyAppBar from './MyAppBar';\n\nconst CustomLayout = (props) => <Layout {...props} appBar={MyAppBar} />;\n\nexport default CustomLayout;\n","import React,{ Fragment }  from 'react';\n\nimport {\n    ChipField,\n    Datagrid,\n    Edit,\n    EditButton,\n    List,\n    ReferenceField,\n    ReferenceManyField,\n    SimpleForm,\n    SingleFieldList,\n    TextField,\n    TextInput,\n    SearchInput,\n    Filter,\n    Pagination\n} from 'react-admin';\nimport { useMediaQuery } from '@material-ui/core';\nimport {RoleListBox} from './comp/rolelistbox';\nimport './comp/comp.css'\nimport Box from \"@material-ui/core/Box\";\nimport UserShow from \"./usershow3\";\n\nconst ProfilPagination = props => <Pagination rowsPerPageOptions={[10, 25, 50, 100]} {...props} />;\n\nrequire('react-dom');\nwindow.React2 = require('react');\nconsole.log(\"-----compare------\")\nconsole.log(window.React1 === window.React2);\n\n\nconst ProfilFilter = (props) => (\n    <Filter {...props}>\n        <SearchInput source=\"surname\" alwaysOn />\n        <TextInput label=\"Surname\" source=\"surname\" defaultValue=\"Surname\" />\n        <TextInput label=\"Givenname\" source=\"givenname\" defaultValue=\"Givenname\" />\n        <TextInput label=\"AddressID\" source=\"addressid\" />\n        <TextInput label=\"Termconfiguration\" source=\"termconfiguration\" defaultValue=\"Termconfiguration\" />\n    </Filter>\n);\n/**\n *\n * editing specified user.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const ProfilEdit = (props) => (\n\n    <Edit  {...props}>\n        <SimpleForm >\n            <div style={{width: '100%'}} >\n                <Box display=\"flex\" flexDirection=\"row\" p={1} m={1} bgcolor=\"background.paper\" >\n                    <Box width=\"40%\" bgcolor=\"white.300\">\n                        <TextInput disabled source=\"id\"/>\n                        <TextField source=\"surname\"  />\n                    </Box>\n                    <Box width=\"60%\" bgcolor=\"white.300\">\n                        <RoleListBox id_user={props.id}/>\n                    </Box>\n                </Box>\n            </div>\n\n        </SimpleForm>\n    </Edit>\n);\n\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\n\n\nexport const ProfilList = (props) => (\n\n\n\n\n        <List {...props} pagination={<ProfilPagination/>} filters={ <ProfilFilter/> }>\n\n            <Datagrid rowClick=\"expand\" expand={<UserShow/>}>\n                <TextField label=\"AddressId\" source=\"id\"/>\n\n                <TextField source=\"anrede\"/>\n                <TextField source=\"surname\"/>\n                <TextField source=\"givenname\"/>\n                <TextField source=\"termconfiguration\"/>\n                <ReferenceManyField label='Roles' reference=\"user_role\" target=\"id_user\">\n                    <SingleFieldList linkType={false}>\n                        <ReferenceField source=\"id_role\" reference=\"role\">\n                            <ChipField source=\"name\"/>\n                        </ReferenceField>\n                    </SingleFieldList>\n                </ReferenceManyField>\n                <EditButton/>\n            </Datagrid>\n        </List>\n\n\n);\n","import React,{ Fragment }  from 'react';\nimport { Pagination} from 'react-admin';\nimport {\n    Datagrid,\n    Edit,\n    List,\n    SimpleForm,\n    TextField,\n    TextInput,\n    Filter\n} from 'react-admin';\nimport './comp/comp.css'\n\n\nrequire('react-dom');\nwindow.React2 = require('react');\nconsole.log(\"-----compare------\")\nconsole.log(window.React1 === window.React2);\n\n\n\n/**\n *\n * editing specified user.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const StudiumEdit = (props) => (\n\n    <Edit  {...props}>\n        <SimpleForm >\n                        <TextInput disabled source=\"addressid\"/>\n                        <TextInput disabled source=\"id\"/>\n                        <TextField disabled source=\"immatdate\"  />\n                        <TextField disabled source=\"examatdate\"/>\n                        <TextField disabled source=\"exmatreason\"/>\n                        <TextField disabled source=\"degreecode\"/>\n                        <TextField disabled source=\"degree\"/>\n                        <TextField disabled source=\"university\"/>\n                        <TextField disabled source=\"capr_nameeng\"/>\n                        <TextField disabled source=\"capr_degreeshort\"/>\n                        <TextField disabled source=\"isnotifiale\"/>\n        </SimpleForm>\n    </Edit>\n);\n\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const StudiumList = (props) => (\n\n    <Fragment>\n        <List {...props} >\n          <Datagrid >\n              <TextField source=\"addressid\"/>\n              <TextField source=\"id\"/>\n              <TextField disabled source=\"immatdate\"  />\n              <TextField disabled source=\"examatdate\"/>\n              <TextField disabled source=\"exmatreason\"/>\n              <TextField disabled source=\"degreecode\"/>\n              <TextField disabled source=\"degree\"/>\n              <TextField disabled source=\"university\"/>\n              <TextField disabled source=\"capr_nameeng\"/>\n              <TextField disabled source=\"capr_degreeshort\"/>\n              <TextField disabled source=\"isnotifiale\"/>\n\n              </Datagrid>\n        </List>\n    </Fragment>\n\n);\n","import React,{ Fragment }  from 'react';\nimport { Pagination} from 'react-admin';\nimport {\n    Datagrid,\n    Edit,\n    List,\n    SimpleForm,\n    TextField,\n    TextInput,\n    Filter\n} from 'react-admin';\nimport './comp/comp.css'\n\n\nrequire('react-dom');\nwindow.React2 = require('react');\nconsole.log(\"-----compare------\")\nconsole.log(window.React1 === window.React2);\n\n\n\n/**\n *\n * editing specified user.\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const CsphEdit = (props) => (\n\n    <Edit  {...props}>\n        <SimpleForm >\n            <TextInput disabled source=\"csph_rwte_name\"/>\n            <TextField disabled source=\"csph_type\"  />\n\n        </SimpleForm>\n    </Edit>\n);\n\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const CsphList = (props) => (\n\n    <Fragment>\n        <List {...props} >\n            <Datagrid >\n                <TextField  source=\"csph_rwte_name\"/>\n                <TextField  source=\"csph_type\"  />\n            </Datagrid>\n        </List>\n    </Fragment>\n\n);\n","import React from 'react';\nimport {Admin, Resource, EditGuesser, ShowGuesser} from 'react-admin';\nimport {RoleList, RoleCreate, RoleEdit} from './role';\nimport {User_allList, User_allEdit} from './user_all';\nimport {RightList, RightCreate} from './right';\nimport myDataProvider from \"./api/dataProvider\";\nimport mySvg from './logo.svg'\nimport langProvider from \"./lang/langProvider\";\nimport CustomLayout from \"./CustomLayout\";\nimport {ProfilList, ProfilEdit} from \"./profil\";\nimport {StudiumEdit, StudiumList} from \"./studium\";\nimport {CsphEdit, CsphList} from \"./csph\";\n\n\nrequire('dotenv').config();\n/**\n *\n * REACT ADMIN AND ALL REQUIRED COMPONENT\n *\n * @returns {*}\n * @constructor\n */\n\nconst App = () => <div style={{width: '95%'}}>\n\n    <div style={{width: '100%'}}>\n        <Admin dataProvider={myDataProvider}\n               i18nProvider={langProvider}\n               layout={CustomLayout}>\n            <Resource name=\"student\" list={ProfilList} edit={ProfilEdit}/>\n            <Resource name=\"studie\"   list={StudiumList} edit={StudiumEdit}/>\n            <Resource name=\"persons\" />\n            <Resource name=\"csph\" />\n            <Resource name=\"role\" list={RoleList} create={RoleCreate} edit={RoleEdit}/>\n            <Resource name=\"right\" list={RightList} create={RightCreate} edit={EditGuesser} show={ShowGuesser}/>\n            <Resource name=\"user_role\"/>\n            <Resource name=\"role_right\"/>\n        </Admin>\n        <div className='footer'>\n            <img src={mySvg} alt={mySvg} width={100} height={100}/>\n        </div>\n    </div>\n</div>;\n\nexport default App\n\n/*<div className=\"chat\" style={{width: '19%'}}>\n    <ThemedExample/>\n    <Calender/>\n    </div>*/\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n/**\n *\n * Rendering  \"APP\"\n *\n */\n\n\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}
{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/codi/Entwicklung/workspace-webstorm/idendity-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _objectSpread from\"/home/codi/Entwicklung/workspace-webstorm/idendity-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{fetchUtils}from'react-admin';import postgrestRestProvider from\"@raphiniert/ra-data-postgrest\";require('dotenv').config();var API_URL=process.env.NODE_ENV==='production'?process.env.REACT_APP_PROD_API_URL:process.env.REACT_APP_DEV_API_URL;/**\n *\n * dataProvider configurations\n *  Authorization Token for the API\n *\n * @param url\n * @param options\n * @returns {Promise<{status: number; headers: Headers; body: string; json: any}>}\n */var httpClient=function httpClient(url){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!options.headers){options.headers=new Headers({Accept:'application/json'});}options.headers.set('Content-Type',\"application/json\");options.headers.set('Access-Control-Expose-Headers',\"Content-Range\");options.headers.set('Access-Control-Expose-Headers',\"X-Total-Count\");options.headers.set('X-Total-Count',\"5000\");options.headers.set('Prefer',\"count=exact\");options.headers.delete('Accept');options.headers.set('Authorization',process.env.REACT_APP_API_KEY);return fetchUtils.fetchJson(url,options);};/**\n * send the Authorization Token in header\n * @type {DataProvider}\n */console.log(\"-----------------------\");console.log(API_URL);console.log(\"-----------------------\");var dataProvider=postgrestRestProvider(API_URL,httpClient);function buildAndQuery(prop,params){var querystring=\"\";for(prop in params.filter){console.log(\"PROPERTY : \"+prop);console.log(\"VALUE : \"+params.filter[prop]);querystring=\"&\"+prop+\"=eq.\"+params.filter[prop];}return querystring;}/**\n *\n * Extending the Dataprovider Functionality to build OR Queries on the Api.\n * The function takes a list of params and their keys to query the specified table with an or.\n *\n * @type {{[p: string]: any, deleteMany: (resource: string, params: DeleteManyParams) => Promise<DeleteManyResult>, updateMany: (resource: string, params: UpdateManyParams) => Promise<UpdateManyResult>, getList: (resource: string, params: GetListParams) => Promise<GetListResult>, getMany: (resource: string, params: GetManyParams) => Promise<GetManyResult>, getManyReference: (resource: string, params: GetManyReferenceParams) => Promise<GetManyReferenceResult>, getOne: (resource: string, params: GetOneParams) => Promise<GetOneResult>, update: (resource: string, params: UpdateParams) => Promise<UpdateResult>, create: (resource: string, params: CreateParams) => Promise<CreateResult>, getManyOr: (function(*, *): Promise<{data: *}>), delete: (resource: string, params: DeleteParams) => Promise<DeleteResult>}}\n */var myDataProvider=_objectSpread(_objectSpread({},dataProvider),{},{/*getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `${API_URL}/${resource}?${JSON.stringify(query)}`;\n\n        return httpClient(url).then(({ headers, json }) => ({\n//            data: json,\n            data: json.map(resource => ({ ...resource, id: resource.addressid }) ),\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },*/getList:function getList(resource,params){console.log(\"IN GET LIST\");console.log(\"PARAMS : \"+JSON.stringify(params));var _params$pagination=params.pagination,page=_params$pagination.page,perPage=_params$pagination.perPage;var _params$sort=params.sort,field=_params$sort.field,order=_params$sort.order;console.log(\"PER PAGE : \"+perPage);console.log(\"FIELD : \"+field);console.log(\"ORDER : \"+order);console.log(\"PAGE : \"+page);console.log(\"FILTER : \"+JSON.stringify(params.filter));var limit=perPage;var offset=(page-1)*perPage;var prop;//let headers = {};\nvar options={};options.headers=new Headers({'Prefer':'count=exact'});options.headers.set('Prefer',\"count=exact\");//let shit = httpClient(url, options).then(function (_ab) {\n//            console.log(\"COUNT RESPONSE : \" + JSON.stringify(_ab));\n//            return  _ab;\n//});\nvar querystring=buildAndQuery(prop,params);var responseheaders={};var url=API_URL+\"/\"+resource+\"?limit=\"+limit+\"&offset=\"+offset+querystring;//let url = API_URL + \"/\" + resource;\nconsole.log(\"URL : \"+url);return httpClient(url,options).then(function(response){responseheaders=response.headers;var contentrange=[0,100];var _iterator=_createForOfIteratorHelper(response.headers.entries()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var pair=_step.value;console.log(pair[0]+': '+pair[1]);if(pair[0]==='content-range'){contentrange=pair[1].split('/');console.log(\"PAIR : \"+pair[1]);console.log(\"RANGE AFTER SPLIT : \"+contentrange);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}var jsondata=response.json;//console.log(\"RESPONSE : \" + JSON.stringify(responseheaders));\n//console.log(\"RESOURCE : \" + resource);\nif(resource===\"user_all\"){//FIXME Maybe we dont need the .replace\njsondata=JSON.parse(JSON.stringify(jsondata).replace(\"\\\"id\\\":\",\"\\\"addressid\\\":\")).map(function(resource){return _objectSpread(_objectSpread({},resource),{},{id:resource.addressid});});}console.log(\"JOSN : \"+JSON.stringify(jsondata));//let totalamount = parseInt(headers.get('content-range').split('/').pop(), 10);\nconsole.log(\"AMOUNT : \"+contentrange[1]);var totalcount=parseInt(contentrange[1]);return{data:jsondata,total:totalcount};});},getOne:function getOne(resource,params){console.log(\"IN GET ONE\");var url=API_URL+\"/\"+resource+\"?id=eq.\"+params.id;if(resource===\"user_all\"){url=API_URL+\"/\"+resource+\"?addressid=eq.\"+params.id;}console.log(\"IN GET ONE URL : \"+url);return httpClient(url).then(function(_a){var json=_a.json;console.log(\"RESOURCE GET ONE : \"+resource);if(resource===\"user_all\"){json=JSON.parse(JSON.stringify(_a.json).replace(\"\\\"id\\\":\",\"\\\"addressid\\\":\")).map(function(resource){return _objectSpread(_objectSpread({},resource),{},{id:resource.addressid});});}console.log(\"JOSN GET ONE: \"+JSON.stringify(json));return{data:json};});},getManyOr:function getManyOr(resource,params){var prop;var queryparam;var queryValues=[];for(prop in params){if(params.hasOwnProperty(prop)){var key=prop;var valueArray=params[key];for(queryparam in valueArray){var queryString=key+\".eq.\"+valueArray[queryparam];queryValues.push(queryString);}}}var queryids=queryValues.join(\",\");var queerystring=!queryids?\"id=eq.-1\":\"or=(\"+queryids+\")\";if(resource===\"user_all\"){queerystring=!queryids?\"addressid=eq.-1\":\"or=(\"+queryids+\")\";}var url=API_URL+\"/\"+resource+\"?\"+queerystring;return httpClient(url).then(function(_a){var json=_a.json;return{data:json};});}});export default myDataProvider;","map":{"version":3,"sources":["/home/codi/Entwicklung/workspace-webstorm/idendity-admin/src/api/dataProvider.js"],"names":["fetchUtils","postgrestRestProvider","require","config","API_URL","process","env","NODE_ENV","REACT_APP_PROD_API_URL","REACT_APP_DEV_API_URL","httpClient","url","options","headers","Headers","Accept","set","delete","REACT_APP_API_KEY","fetchJson","console","log","dataProvider","buildAndQuery","prop","params","querystring","filter","myDataProvider","getList","resource","JSON","stringify","pagination","page","perPage","sort","field","order","limit","offset","responseheaders","then","response","contentrange","entries","pair","split","jsondata","json","parse","replace","map","id","addressid","totalcount","parseInt","data","total","getOne","_a","getManyOr","queryparam","queryValues","hasOwnProperty","key","valueArray","queryString","push","queryids","join","queerystring"],"mappings":"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","sourcesContent":["import {fetchUtils} from 'react-admin';\nimport postgrestRestProvider from \"@raphiniert/ra-data-postgrest\";\nrequire('dotenv').config();\nconst API_URL = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_PROD_API_URL : process.env.REACT_APP_DEV_API_URL;\n\n\n/**\n *\n * dataProvider configurations\n *  Authorization Token for the API\n *\n * @param url\n * @param options\n * @returns {Promise<{status: number; headers: Headers; body: string; json: any}>}\n */\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({Accept: 'application/json'});\n    }\n    options.headers.set('Content-Type', `application/json`);\n    options.headers.set('Access-Control-Expose-Headers', `Content-Range`);\n    options.headers.set('Access-Control-Expose-Headers', `X-Total-Count`);\n    options.headers.set('X-Total-Count', `5000`);\n    options.headers.set('Prefer', `count=exact`);\n    options.headers.delete('Accept');\n    options.headers.set('Authorization', process.env.REACT_APP_API_KEY);\n    return fetchUtils.fetchJson(url, options);\n\n};\n\n\n/**\n * send the Authorization Token in header\n * @type {DataProvider}\n */\n\nconsole.log(\"-----------------------\");\nconsole.log(API_URL);\nconsole.log(\"-----------------------\");\n\nconst dataProvider = postgrestRestProvider(API_URL, httpClient);\n\nfunction buildAndQuery(prop, params) {\n    let querystring = \"\";\n    for (prop in params.filter) {\n        console.log(\"PROPERTY : \" + prop);\n        console.log(\"VALUE : \" + params.filter[prop]);\n        querystring = \"&\" + prop + \"=eq.\" + params.filter[prop];\n    }\n    return querystring;\n}\n\n/**\n *\n * Extending the Dataprovider Functionality to build OR Queries on the Api.\n * The function takes a list of params and their keys to query the specified table with an or.\n *\n * @type {{[p: string]: any, deleteMany: (resource: string, params: DeleteManyParams) => Promise<DeleteManyResult>, updateMany: (resource: string, params: UpdateManyParams) => Promise<UpdateManyResult>, getList: (resource: string, params: GetListParams) => Promise<GetListResult>, getMany: (resource: string, params: GetManyParams) => Promise<GetManyResult>, getManyReference: (resource: string, params: GetManyReferenceParams) => Promise<GetManyReferenceResult>, getOne: (resource: string, params: GetOneParams) => Promise<GetOneResult>, update: (resource: string, params: UpdateParams) => Promise<UpdateResult>, create: (resource: string, params: CreateParams) => Promise<CreateResult>, getManyOr: (function(*, *): Promise<{data: *}>), delete: (resource: string, params: DeleteParams) => Promise<DeleteResult>}}\n */\nconst myDataProvider = {\n    ...dataProvider,\n    /*getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `${API_URL}/${resource}?${JSON.stringify(query)}`;\n\n        return httpClient(url).then(({ headers, json }) => ({\n//            data: json,\n            data: json.map(resource => ({ ...resource, id: resource.addressid }) ),\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },*/\n\n\n\n    getList: function (resource, params) {\n        console.log(\"IN GET LIST\");\n        console.log(\"PARAMS : \" + JSON.stringify(params));\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        console.log(\"PER PAGE : \" + perPage);\n        console.log(\"FIELD : \" + field);\n        console.log(\"ORDER : \" + order);\n        console.log(\"PAGE : \" + page);\n        console.log(\"FILTER : \" + JSON.stringify(params.filter));\n        let limit = perPage;\n        let offset = (page - 1) * perPage;\n        let prop;\n\n\n        //let headers = {};\n        let options={};\n        options.headers = new Headers({'Prefer': 'count=exact'});\n        options.headers.set('Prefer', `count=exact`);\n        //let shit = httpClient(url, options).then(function (_ab) {\n        //            console.log(\"COUNT RESPONSE : \" + JSON.stringify(_ab));\n        //            return  _ab;\n        //});\n\n\n        let querystring = buildAndQuery(prop, params);\n        var responseheaders = {};\n\n        let url = API_URL + \"/\" + resource + \"?limit=\" + limit + \"&offset=\" + offset + querystring;\n        //let url = API_URL + \"/\" + resource;\n        console.log(\"URL : \" + url);\n        return httpClient(url, options).then((response) => {\n            responseheaders = response.headers;\n            let contentrange = [0,100];\n            for (var pair of response.headers.entries()) {\n                console.log(pair[0]+ ': '+ pair[1]);\n                if(pair[0]==='content-range'){\n                    contentrange = pair[1].split('/');\n                    console.log(\"PAIR : \" + pair[1]);\n                    console.log(\"RANGE AFTER SPLIT : \" + contentrange);\n                }\n            }\n            let jsondata = response.json;\n            //console.log(\"RESPONSE : \" + JSON.stringify(responseheaders));\n\n            //console.log(\"RESOURCE : \" + resource);\n\n            if(resource===\"user_all\"){\n                //FIXME Maybe we dont need the .replace\n                jsondata = JSON.parse(JSON.stringify(jsondata).replace(\"\\\"id\\\":\", \"\\\"addressid\\\":\")).map(resource => ({ ...resource, id: resource.addressid }));\n            }\n            console.log(\"JOSN : \" + JSON.stringify(jsondata));\n            //let totalamount = parseInt(headers.get('content-range').split('/').pop(), 10);\n            console.log(\"AMOUNT : \" + contentrange[1]);\n            var totalcount = parseInt(contentrange[1]);\n            return ({data: jsondata, total: totalcount});\n        })\n    },\n\n    getOne: function (resource, params) {\n      console.log(\"IN GET ONE\");\n\n      let url = API_URL + \"/\" + resource + \"?id=eq.\" + params.id;\n      if(resource===\"user_all\"){\n        url = API_URL + \"/\" + resource + \"?addressid=eq.\" + params.id;\n      }\n      console.log(\"IN GET ONE URL : \" + url);\n      return httpClient(url).then(function (_a) {\n          let json = _a.json;\n          console.log(\"RESOURCE GET ONE : \" + resource);\n          if(resource=== \"user_all\"){\n            json = JSON.parse(JSON.stringify(_a.json).replace(\"\\\"id\\\":\", \"\\\"addressid\\\":\")).map(resource => ({ ...resource, id: resource.addressid }));\n          }\n          console.log(\"JOSN GET ONE: \" + JSON.stringify(json));\n          return ({data: json});\n      });\n\n    },\n\n    getManyOr: function (resource, params) {\n        let prop;\n        let queryparam;\n        let queryValues = [];\n\n        for (prop in params) {\n            if (params.hasOwnProperty(prop)) {\n                let key = prop;\n                let valueArray = params[key];\n                for (queryparam in valueArray) {\n                    let queryString = key + \".eq.\" + valueArray[queryparam];\n                    queryValues.push(queryString);\n                }\n            }\n        }\n        let queryids = queryValues.join(\",\");\n        let queerystring = (!queryids) ? \"id=eq.-1\" : \"or=(\" + queryids + \")\";\n            if(resource===\"user_all\"){\n                queerystring = (!queryids) ? \"addressid=eq.-1\" : \"or=(\" + queryids + \")\";\n      }\n        let url = API_URL + \"/\" + resource + \"?\" + queerystring;\n        return httpClient(url).then(function (_a) {\n            var json = _a.json;\n            return ({data: json});\n        });\n    },\n};\n\nexport default myDataProvider\n"]},"metadata":{},"sourceType":"module"}
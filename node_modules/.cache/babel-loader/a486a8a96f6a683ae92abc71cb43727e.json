{"ast":null,"code":"import dataProvider from'../api/dataProvider';import React from'react';/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */export var ApiService=function ApiService(props){var value={};return React.createElement(ApiService.Provider,{value:value},props.children);};/**\n *\n *  get the right that belong to specified role\n *\n * @type {{deleteUserRole: myApiService.deleteUserRole, fetchRightObjectsFOrId: (function(*=): (*|Promise<unknown>)), fetchAllRights: (function(*, *): Promise<GetListResult>), createUserRole: myApiService.createUserRole, fetchRightIdsForRoles: (function(*=): (*|Promise<unknown>)), fetchAllRoleObjects: (function(): Promise<GetListResult>), fetchRoleListForUser: (function(string): Promise<GetListResult>)}}\n */var myApiService={fetchRightIdsForRoles:function fetchRightIdsForRoles(roleIds){return dataProvider.getManyOr('role_right',{id_role:roleIds});},/**\n     *\n     * Insert//assign a relation of RoleRight.\n     *\n     * @param userRightIds\n     * @returns {*|Promise<unknown>}\n     */fetchRightObjectsFOrId:function fetchRightObjectsFOrId(userRightIds){return dataProvider.getManyOr('right',{id:userRightIds});},/**\n     * get all rights\n     *\n     * @param resource\n     * @param params\n     * @returns {Promise<GetListResult>}\n     */fetchAllRights:function fetchAllRights(resource,params){return dataProvider.getList('right',{pagination:{page:1,perPage:20},sort:{field:'name',order:'ASC'},filter:{}});},/* fetchAllUserObjects: function () {\n        return dataProvider.getList('user', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'ASC'\n            },\n            filter: {},\n        })\n    },\n*/ /**\n     *\n     * getting all Roles\n     *\n     * @returns {Promise<GetListResult>}\n     */fetchAllRoleObjects:function fetchAllRoleObjects(){return dataProvider.getList('role',{pagination:{page:1,perPage:20},sort:{field:'name',order:'ASC'},filter:{}});},/**\n     *  Getting all Roles for a specified user.\n     *\n     * @param userId\n     * @returns {Promise<GetListResult>}\n     */fetchRoleListForUser:function fetchRoleListForUser(userId){return dataProvider.getList('user_role',{pagination:{page:1,perPage:50},sort:{field:'id',order:'ASC'},filter:{id_user:userId}});},/**\n     * assign roles to User\n     *\n     * @param payload\n     */createUserRole:function createUserRole(payload){dataProvider.create('user_role',{data:payload}).then(function(response){// success side effects go here\n}).catch(function(error){console.log(error);});},/**\n     * remove roles from User\n     *\n     * @param userRoleId\n     */deleteUserRole:function deleteUserRole(userRoleId){dataProvider.delete('user_role',{id:userRoleId}).then(function(response){// success side effects go here\n}).catch(function(error){console.log(error);});}};export default myApiService;","map":{"version":3,"sources":["/home/codi/Entwicklung/workspace-webstorm/idendity-admin/src/api/apiService.js"],"names":["dataProvider","React","ApiService","props","value","children","myApiService","fetchRightIdsForRoles","roleIds","getManyOr","id_role","fetchRightObjectsFOrId","userRightIds","id","fetchAllRights","resource","params","getList","pagination","page","perPage","sort","field","order","filter","fetchAllRoleObjects","fetchRoleListForUser","userId","id_user","createUserRole","payload","create","data","then","response","catch","error","console","log","deleteUserRole","userRoleId","delete"],"mappings":"AAAA,MAAOA,CAAAA,YAAP,KAAyB,qBAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA;;;;;GAMA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CACjC,GAAMC,CAAAA,KAAK,CAAG,EAAd,CAEA,MACI,qBAAC,UAAD,CAAY,QAAZ,EAAqB,KAAK,CAAEA,KAA5B,EACKD,KAAK,CAACE,QADX,CADJ,CAKH,CARM,CASP;;;;;GAOA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,qBAAqB,CAAE,+BAAUC,OAAV,CAAmB,CACtC,MAAOR,CAAAA,YAAY,CAACS,SAAb,CAAuB,YAAvB,CAAqC,CACxCC,OAAO,CAAEF,OAD+B,CAArC,CAAP,CAGH,CALgB,CAOjB;;;;;;OAOAG,sBAAsB,CAAE,gCAAUC,YAAV,CAAwB,CAC5C,MAAOZ,CAAAA,YAAY,CAACS,SAAb,CAAuB,OAAvB,CAAgC,CACnCI,EAAE,CAAED,YAD+B,CAAhC,CAAP,CAGH,CAlBgB,CAoBjB;;;;;;OAOAE,cAAc,CAAE,wBAAUC,QAAV,CAAoBC,MAApB,CAA4B,CACxC,MAAOhB,CAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,CAA8B,CACjCC,UAAU,CAAE,CACRC,IAAI,CAAE,CADE,CAERC,OAAO,CAAE,EAFD,CADqB,CAKjCC,IAAI,CAAE,CACFC,KAAK,CAAE,MADL,CAEFC,KAAK,CAAE,KAFL,CAL2B,CASjCC,MAAM,CAAE,EATyB,CAA9B,CAAP,CAWH,CAvCgB,CAyClB;;;;;;;;;;;;;EAzCkB,CAwDjB;;;;;OAMAC,mBAAmB,CAAE,8BAAY,CAC7B,MAAOzB,CAAAA,YAAY,CAACiB,OAAb,CAAqB,MAArB,CAA6B,CAChCC,UAAU,CAAE,CACRC,IAAI,CAAE,CADE,CAERC,OAAO,CAAE,EAFD,CADoB,CAKhCC,IAAI,CAAE,CACFC,KAAK,CAAE,MADL,CAEFC,KAAK,CAAE,KAFL,CAL0B,CAShCC,MAAM,CAAE,EATwB,CAA7B,CAAP,CAWH,CA1EgB,CA4EjB;;;;;OAMAE,oBAAoB,CAAE,8BAAUC,MAAV,CAAkB,CACpC,MAAO3B,CAAAA,YAAY,CAACiB,OAAb,CAAqB,WAArB,CAAkC,CACrCC,UAAU,CAAE,CACRC,IAAI,CAAE,CADE,CAERC,OAAO,CAAE,EAFD,CADyB,CAKrCC,IAAI,CAAE,CACFC,KAAK,CAAE,IADL,CAEFC,KAAK,CAAE,KAFL,CAL+B,CASrCC,MAAM,CAAE,CACJI,OAAO,CAAED,MADL,CAT6B,CAAlC,CAAP,CAaH,CAhGgB,CAkGjB;;;;OAMAE,cAAc,CAAE,wBAAUC,OAAV,CAAmB,CAC/B9B,YAAY,CACP+B,MADL,CACY,WADZ,CACyB,CAACC,IAAI,CAAEF,OAAP,CADzB,EAEKG,IAFL,CAEU,SAAAC,QAAQ,CAAI,CACd;AACH,CAJL,EAKKC,KALL,CAKW,SAAAC,KAAK,CAAI,CACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACH,CAPL,EAQH,CAjHgB,CAkHjB;;;;OAKAG,cAAc,CAAE,wBAAUC,UAAV,CAAsB,CAClCxC,YAAY,CACPyC,MADL,CACY,WADZ,CACyB,CAAC5B,EAAE,CAAE2B,UAAL,CADzB,EAEKP,IAFL,CAEU,SAAAC,QAAQ,CAAI,CACd;AACH,CAJL,EAKKC,KALL,CAKW,SAAAC,KAAK,CAAI,CACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACH,CAPL,EAQH,CAhIgB,CAArB,CAoIA,cAAe9B,CAAAA,YAAf","sourcesContent":["import dataProvider from '../api/dataProvider';\nimport React from 'react';\n\n/**\n *\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const ApiService = (props) => {\n    const value = {};\n\n    return (\n        <ApiService.Provider value={value}>\n            {props.children}\n        </ApiService.Provider>\n    );\n};\n/**\n *\n *  get the right that belong to specified role\n *\n * @type {{deleteUserRole: myApiService.deleteUserRole, fetchRightObjectsFOrId: (function(*=): (*|Promise<unknown>)), fetchAllRights: (function(*, *): Promise<GetListResult>), createUserRole: myApiService.createUserRole, fetchRightIdsForRoles: (function(*=): (*|Promise<unknown>)), fetchAllRoleObjects: (function(): Promise<GetListResult>), fetchRoleListForUser: (function(string): Promise<GetListResult>)}}\n */\n\nconst myApiService = {\n    fetchRightIdsForRoles: function (roleIds) {\n        return dataProvider.getManyOr('role_right', {\n            id_role: roleIds\n        });\n    },\n\n    /**\n     *\n     * Insert//assign a relation of RoleRight.\n     *\n     * @param userRightIds\n     * @returns {*|Promise<unknown>}\n     */\n    fetchRightObjectsFOrId: function (userRightIds) {\n        return dataProvider.getManyOr('right', {\n            id: userRightIds\n        });\n    },\n\n    /**\n     * get all rights\n     *\n     * @param resource\n     * @param params\n     * @returns {Promise<GetListResult>}\n     */\n    fetchAllRights: function (resource, params) {\n        return dataProvider.getList('right', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'ASC'\n            },\n            filter: {},\n        });\n    },\n\n   /* fetchAllUserObjects: function () {\n        return dataProvider.getList('user', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'ASC'\n            },\n            filter: {},\n        })\n    },\n*/\n\n    /**\n     *\n     * getting all Roles\n     *\n     * @returns {Promise<GetListResult>}\n     */\n    fetchAllRoleObjects: function () {\n        return dataProvider.getList('role', {\n            pagination: {\n                page: 1,\n                perPage: 20\n            },\n            sort: {\n                field: 'name',\n                order: 'ASC'\n            },\n            filter: {},\n        })\n    },\n\n    /**\n     *  Getting all Roles for a specified user.\n     *\n     * @param userId\n     * @returns {Promise<GetListResult>}\n     */\n    fetchRoleListForUser: function (userId) {\n        return dataProvider.getList('user_role', {\n            pagination: {\n                page: 1,\n                perPage: 50\n            },\n            sort: {\n                field: 'id',\n                order: 'ASC'\n            },\n            filter: {\n                id_user: userId\n            },\n        });\n    },\n\n    /**\n     * assign roles to User\n     *\n     * @param payload\n     */\n\n    createUserRole: function (payload) {\n        dataProvider\n            .create('user_role', {data: payload})\n            .then(response => {\n                // success side effects go here\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    },\n    /**\n     * remove roles from User\n     *\n     * @param userRoleId\n     */\n    deleteUserRole: function (userRoleId) {\n        dataProvider\n            .delete('user_role', {id: userRoleId})\n            .then(response => {\n                // success side effects go here\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n};\n\n\nexport default myApiService\n"]},"metadata":{},"sourceType":"module"}
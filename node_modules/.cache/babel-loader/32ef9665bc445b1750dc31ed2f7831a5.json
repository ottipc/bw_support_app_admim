{"ast":null,"code":"var _jsxFileName = \"/home/codi/Entwicklung/workspace-webstorm/question_app_admin/src/comp/linkAnyFieldButton.js\";\nimport React, { Component, Children, cloneElement, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport shouldUpdate from 'recompose/shouldUpdate';\nimport { withRouter } from 'react-router-dom';\nimport compose from 'recompose/compose';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link, linkToRecord } from 'react-admin';\n/**\n * style\n *\n * @type {{link: {cursor: string, \"& *\": {cursor: string}}}}\n */\n\nconst styles = {\n  link: {\n    cursor: 'pointer',\n    '& *': {\n      cursor: 'pointer'\n    }\n  }\n};\n/**\n *\n * @param link\n * @param rest\n * @returns {*}\n */\n\nconst sanitizeRestClasses = ({\n  link,\n  ...rest\n}) => rest;\n/**\n *\n * @param classes\n * @param to\n * @param relative\n * @param disabled\n * @param history\n * @param location\n * @param match\n * @param staticContext\n * @param rest\n * @returns {*}\n */\n\n\nconst sanitizeRestProps = ({\n  classes,\n  to,\n  relative,\n  disabled,\n  history,\n  location,\n  match,\n  staticContext,\n  ...rest\n}) => rest;\n\nclass LinkAnyFieldButton extends Component {\n  render() {\n    const {\n      basepath = '',\n      children,\n      record = {},\n      classes,\n      to,\n      relative,\n      disabled,\n      match\n    } = this.props;\n    const recordLink = to.startsWith('/') ? to.replace(/\\/:([\\w-]+)/g, (m, param) => {\n      return `/${record[param]}`;\n    }) : linkToRecord(basepath, record.id, to);\n    const completeTo = relative ? `${match.url}${recordLink}` : recordLink;\n    const rest = sanitizeRestProps(this.props);\n    const restClasses = sanitizeRestClasses(classes);\n    const isDisabled = typeof disabled === 'function' ? disabled(record) : disabled;\n    const countChildren = Children.count(children);\n    const childElements = countChildren === 1 ? cloneElement(children, {\n      record,\n      basepath,\n      classes: restClasses\n    }) : Children.map(children, field => cloneElement(field, {\n      record,\n      basepath,\n      classes: restClasses,\n      ...rest\n    }));\n    return isDisabled ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, childElements) : React.createElement(Link, {\n      to: `${completeTo}`,\n      className: classes.link,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, childElements);\n  }\n\n}\n/**\n *\n *  add props: history, location, match, staticContext\n *  add style\n *\n *  @param props\n *  @param nextProps\n *\n */\n\n\nLinkAnyFieldButton.propTypes = {\n  // passed by parent\n  basepath: PropTypes.string,\n  children: PropTypes.any,\n  record: PropTypes.object,\n  classes: PropTypes.object,\n  // own props\n  to: PropTypes.string,\n  relative: PropTypes.bool,\n  disabled: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  // withRouter props\n  match: PropTypes.object\n};\nLinkAnyFieldButton.defaultProps = {\n  to: 'show'\n};\nconst enhance = compose(withRouter, // adds props: history, location, match, staticContext\nwithStyles(styles), shouldUpdate((props, nextProps) => props.translate !== nextProps.translate || props.record && nextProps.record && props.record.id !== nextProps.record.id || props.basePath !== nextProps.basePath || props.record == null && nextProps.record != null));\nexport default enhance(LinkAnyFieldButton);","map":{"version":3,"sources":["/home/codi/Entwicklung/workspace-webstorm/question_app_admin/src/comp/linkAnyFieldButton.js"],"names":["React","Component","Children","cloneElement","Fragment","PropTypes","shouldUpdate","withRouter","compose","withStyles","Link","linkToRecord","styles","link","cursor","sanitizeRestClasses","rest","sanitizeRestProps","classes","to","relative","disabled","history","location","match","staticContext","LinkAnyFieldButton","render","basepath","children","record","props","recordLink","startsWith","replace","m","param","id","completeTo","url","restClasses","isDisabled","countChildren","count","childElements","map","field","propTypes","string","any","object","bool","oneOfType","func","defaultProps","enhance","nextProps","translate","basePath"],"mappings":"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","sourcesContent":["import React, { Component, Children, cloneElement, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport shouldUpdate from 'recompose/shouldUpdate';\nimport { withRouter } from 'react-router-dom';\nimport compose from 'recompose/compose';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link, linkToRecord } from 'react-admin';\n\n/**\n * style\n *\n * @type {{link: {cursor: string, \"& *\": {cursor: string}}}}\n */\nconst styles = {\n    link: {\n        cursor: 'pointer',\n        '& *': {\n            cursor: 'pointer',\n        },\n    },\n};\n/**\n *\n * @param link\n * @param rest\n * @returns {*}\n */\nconst sanitizeRestClasses = ({ link, ...rest }) => rest;\n\n/**\n *\n * @param classes\n * @param to\n * @param relative\n * @param disabled\n * @param history\n * @param location\n * @param match\n * @param staticContext\n * @param rest\n * @returns {*}\n */\nconst sanitizeRestProps = ({\n                               classes,\n                               to,\n                               relative,\n                               disabled,\n                               history,\n                               location,\n                               match,\n                               staticContext,\n                               ...rest\n                           }) => rest;\n\n\nclass LinkAnyFieldButton extends Component {\n    static propTypes = {\n        // passed by parent\n        basepath: PropTypes.string,\n        children: PropTypes.any,\n        record: PropTypes.object,\n        classes: PropTypes.object,\n        // own props\n        to: PropTypes.string,\n        relative: PropTypes.bool,\n        disabled: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n        // withRouter props\n        match: PropTypes.object,\n    };\n    static defaultProps = {\n        to: 'show',\n    };\n\n    render() {\n        const {\n            basepath = '',\n            children,\n            record = {},\n            classes,\n            to,\n            relative,\n            disabled,\n            match,\n        } = this.props;\n\n        const recordLink = to.startsWith('/')\n            ? to.replace(/\\/:([\\w-]+)/g, (m, param) => {\n                return `/${record[param]}`;\n            })\n            : linkToRecord(basepath, record.id, to);\n        const completeTo = relative ? `${match.url}${recordLink}` : recordLink;\n        const rest = sanitizeRestProps(this.props);\n        const restClasses = sanitizeRestClasses(classes);\n        const isDisabled =\n            typeof disabled === 'function' ? disabled(record) : disabled;\n\n        const countChildren = Children.count(children);\n\n        const childElements =\n            countChildren === 1\n                ? cloneElement(children, {\n                    record,\n                    basepath,\n                    classes: restClasses,\n                })\n                : Children.map(children, field =>\n                    cloneElement(field, {\n                        record,\n                        basepath,\n                        classes: restClasses,\n                        ...rest,\n                    })\n                );\n\n        return isDisabled ? (\n            <Fragment>{childElements}</Fragment>\n        ) : (\n            <Link to={`${completeTo}`} className={classes.link}>\n                {childElements}\n            </Link>\n        );\n    }\n}\n\n/**\n *\n *  add props: history, location, match, staticContext\n *  add style\n *\n *  @param props\n *  @param nextProps\n *\n */\nconst enhance = compose(\n    withRouter, // adds props: history, location, match, staticContext\n    withStyles(styles),\n    shouldUpdate(\n        (props, nextProps) =>\n            props.translate !== nextProps.translate ||\n            (props.record &&\n                nextProps.record &&\n                props.record.id !== nextProps.record.id) ||\n            props.basePath !== nextProps.basePath ||\n            (props.record == null && nextProps.record != null)\n    )\n);\n\nexport default enhance(LinkAnyFieldButton);\n"]},"metadata":{},"sourceType":"module"}
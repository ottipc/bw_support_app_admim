{"ast":null,"code":"var _jsxFileName = \"/home/codi/Entwicklung/workspace-webstorm/question_app_admin/src/myEdit.js\";\nimport { useEditController } from \"react-admin\";\nimport React, { cloneElement } from \"react\";\nexport const MyEdit = props => {\n  const {\n    basePath,\n    // deduced from the location, useful for action buttons\n    defaultTitle,\n    // the translated title based on the resource, e.g. 'Post #123'\n    loaded,\n    // boolean that is false until the record is available\n    loading,\n    // boolean that is true on mount, and false once the record was fetched\n    record,\n    // record fetched via dataProvider.getOne() based on the id from the location\n    redirect,\n    // the default redirection route. Defaults to 'list'\n    resource,\n    // the resource name, deduced from the location. e.g. 'posts'\n    save,\n    // the update callback, to be passed to the underlying form as submit handler\n    saving,\n    // boolean that becomes true when the dataProvider is called to update the record\n    version // integer used by the refresh feature\n\n  } = useEditController(props);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, cloneElement(props.children, {\n    basePath,\n    record,\n    redirect,\n    resource,\n    save,\n    saving,\n    version\n  }));\n};","map":{"version":3,"sources":["/home/codi/Entwicklung/workspace-webstorm/question_app_admin/src/myEdit.js"],"names":["useEditController","React","cloneElement","MyEdit","props","basePath","defaultTitle","loaded","loading","record","redirect","resource","save","saving","version","children"],"mappings":";AAAA,SAAQA,iBAAR,QAAgC,aAAhC;AACA,OAAOC,KAAP,IAAeC,YAAf,QAAkC,OAAlC;AAEA,OAAO,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAC3B,QAAM;AACFC,IAAAA,QADE;AACQ;AACVC,IAAAA,YAFE;AAEY;AACdC,IAAAA,MAHE;AAGM;AACRC,IAAAA,OAJE;AAIO;AACTC,IAAAA,MALE;AAKM;AACRC,IAAAA,QANE;AAMQ;AACVC,IAAAA,QAPE;AAOQ;AACVC,IAAAA,IARE;AAQI;AACNC,IAAAA,MATE;AASM;AACRC,IAAAA,OAVE,CAUO;;AAVP,MAWFd,iBAAiB,CAACI,KAAD,CAXrB;AAYA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKF,YAAY,CAACE,KAAK,CAACW,QAAP,EAAiB;AAC1BV,IAAAA,QAD0B;AAE1BI,IAAAA,MAF0B;AAG1BC,IAAAA,QAH0B;AAI1BC,IAAAA,QAJ0B;AAK1BC,IAAAA,IAL0B;AAM1BC,IAAAA,MAN0B;AAO1BC,IAAAA;AAP0B,GAAjB,CAFjB,CADJ;AAcH,CA3BM","sourcesContent":["import {useEditController} from \"react-admin\";\nimport React, {cloneElement} from \"react\";\n\nexport const MyEdit = props => {\n    const {\n        basePath, // deduced from the location, useful for action buttons\n        defaultTitle, // the translated title based on the resource, e.g. 'Post #123'\n        loaded, // boolean that is false until the record is available\n        loading, // boolean that is true on mount, and false once the record was fetched\n        record, // record fetched via dataProvider.getOne() based on the id from the location\n        redirect, // the default redirection route. Defaults to 'list'\n        resource, // the resource name, deduced from the location. e.g. 'posts'\n        save, // the update callback, to be passed to the underlying form as submit handler\n        saving, // boolean that becomes true when the dataProvider is called to update the record\n        version, // integer used by the refresh feature\n    } = useEditController(props);\n    return (\n        <div>\n\n            {cloneElement(props.children, {\n                basePath,\n                record,\n                redirect,\n                resource,\n                save,\n                saving,\n                version,\n            })}\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}